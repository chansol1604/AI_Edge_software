
RTOS_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004918  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b78  08004b78  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b80  08004b80  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b80  08004b80  00014b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b9c  20000060  08004be8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bfc  08004be8  00024bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013fae  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ff3  00000000  00000000  00034081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  00037078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d99  00000000  00000000  00038230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017eca  00000000  00000000  00038fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b4b  00000000  00000000  00050e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095688  00000000  00000000  000649de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c6c  00000000  00000000  000fa068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000fecd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004aa0 	.word	0x08004aa0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004aa0 	.word	0x08004aa0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e0:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <MX_FREERTOS_Init+0x38>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	480c      	ldr	r0, [pc, #48]	; (8000518 <MX_FREERTOS_Init+0x3c>)
 80004e6:	f001 fcc3 	bl	8001e70 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a0b      	ldr	r2, [pc, #44]	; (800051c <MX_FREERTOS_Init+0x40>)
 80004ee:	6013      	str	r3, [r2, #0]

  /* creation of LED_Blink01 */
  LED_Blink01Handle = osThreadNew(StartTask02, NULL, &LED_Blink01_attributes);
 80004f0:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <MX_FREERTOS_Init+0x44>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	480b      	ldr	r0, [pc, #44]	; (8000524 <MX_FREERTOS_Init+0x48>)
 80004f6:	f001 fcbb 	bl	8001e70 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <MX_FREERTOS_Init+0x4c>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* creation of LED_Blink02 */
  LED_Blink02Handle = osThreadNew(StartTask03, NULL, &LED_Blink02_attributes);
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <MX_FREERTOS_Init+0x50>)
 8000502:	2100      	movs	r1, #0
 8000504:	480a      	ldr	r0, [pc, #40]	; (8000530 <MX_FREERTOS_Init+0x54>)
 8000506:	f001 fcb3 	bl	8001e70 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a09      	ldr	r2, [pc, #36]	; (8000534 <MX_FREERTOS_Init+0x58>)
 800050e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	08004af4 	.word	0x08004af4
 8000518:	08000539 	.word	0x08000539
 800051c:	2000007c 	.word	0x2000007c
 8000520:	08004b18 	.word	0x08004b18
 8000524:	08000549 	.word	0x08000549
 8000528:	20000080 	.word	0x20000080
 800052c:	08004b3c 	.word	0x08004b3c
 8000530:	08000569 	.word	0x08000569
 8000534:	20000084 	.word	0x20000084

08000538 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f001 fd27 	bl	8001f94 <osDelay>
 8000546:	e7fb      	b.n	8000540 <StartDefaultTask+0x8>

08000548 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000550:	2140      	movs	r1, #64	; 0x40
 8000552:	4804      	ldr	r0, [pc, #16]	; (8000564 <StartTask02+0x1c>)
 8000554:	f000 fcad 	bl	8000eb2 <HAL_GPIO_TogglePin>
    osDelay(800);
 8000558:	f44f 7048 	mov.w	r0, #800	; 0x320
 800055c:	f001 fd1a 	bl	8001f94 <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000560:	e7f6      	b.n	8000550 <StartTask02+0x8>
 8000562:	bf00      	nop
 8000564:	40020000 	.word	0x40020000

08000568 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	4803      	ldr	r0, [pc, #12]	; (8000580 <StartTask03+0x18>)
 8000574:	f000 fc9d 	bl	8000eb2 <HAL_GPIO_TogglePin>
    osDelay(200);
 8000578:	20c8      	movs	r0, #200	; 0xc8
 800057a:	f001 fd0b 	bl	8001f94 <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800057e:	e7f7      	b.n	8000570 <StartTask03+0x8>
 8000580:	40020000 	.word	0x40020000

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_GPIO_Init+0x7c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a17      	ldr	r2, [pc, #92]	; (8000600 <MX_GPIO_Init+0x7c>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_GPIO_Init+0x7c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_GPIO_Init+0x7c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a10      	ldr	r2, [pc, #64]	; (8000600 <MX_GPIO_Init+0x7c>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_GPIO_Init+0x7c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	21c0      	movs	r1, #192	; 0xc0
 80005d6:	480b      	ldr	r0, [pc, #44]	; (8000604 <MX_GPIO_Init+0x80>)
 80005d8:	f000 fc52 	bl	8000e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005dc:	23c0      	movs	r3, #192	; 0xc0
 80005de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4619      	mov	r1, r3
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <MX_GPIO_Init+0x80>)
 80005f4:	f000 fac0 	bl	8000b78 <HAL_GPIO_Init>

}
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40020000 	.word	0x40020000

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 f990 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f80a 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f7ff ffb6 	bl	8000584 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000618:	f001 fbe0 	bl	8001ddc <osKernelInitialize>
  MX_FREERTOS_Init();
 800061c:	f7ff ff5e 	bl	80004dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000620:	f001 fc00 	bl	8001e24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0x1c>
	...

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 f948 	bl	80048cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <SystemClock_Config+0xc8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a26      	ldr	r2, [pc, #152]	; (80006f0 <SystemClock_Config+0xc8>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <SystemClock_Config+0xc8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <SystemClock_Config+0xcc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <SystemClock_Config+0xcc>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <SystemClock_Config+0xcc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800069c:	2364      	movs	r3, #100	; 0x64
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fc1b 	bl	8000ee8 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 f830 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2103      	movs	r1, #3
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fe7d 	bl	80013d8 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006e4:	f000 f81a 	bl	800071c <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3750      	adds	r7, #80	; 0x50
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d101      	bne.n	800070e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800070a:	f000 f933 	bl	8000974 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40000800 	.word	0x40000800

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_MspInit+0x54>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	4a11      	ldr	r2, [pc, #68]	; (800077c <HAL_MspInit+0x54>)
 8000738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073c:	6453      	str	r3, [r2, #68]	; 0x44
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_MspInit+0x54>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <HAL_MspInit+0x54>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <HAL_MspInit+0x54>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	6413      	str	r3, [r2, #64]	; 0x40
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_MspInit+0x54>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	210f      	movs	r1, #15
 800076a:	f06f 0001 	mvn.w	r0, #1
 800076e:	f000 f9d9 	bl	8000b24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08e      	sub	sp, #56	; 0x38
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000788:	2300      	movs	r3, #0
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	4b33      	ldr	r3, [pc, #204]	; (8000864 <HAL_InitTick+0xe4>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a32      	ldr	r2, [pc, #200]	; (8000864 <HAL_InitTick+0xe4>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b30      	ldr	r3, [pc, #192]	; (8000864 <HAL_InitTick+0xe4>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007ac:	f107 0210 	add.w	r2, r7, #16
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 f81a 	bl	80017f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d103      	bne.n	80007ce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007c6:	f000 ffff 	bl	80017c8 <HAL_RCC_GetPCLK1Freq>
 80007ca:	6378      	str	r0, [r7, #52]	; 0x34
 80007cc:	e004      	b.n	80007d8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007ce:	f000 fffb 	bl	80017c8 <HAL_RCC_GetPCLK1Freq>
 80007d2:	4603      	mov	r3, r0
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007da:	4a23      	ldr	r2, [pc, #140]	; (8000868 <HAL_InitTick+0xe8>)
 80007dc:	fba2 2303 	umull	r2, r3, r2, r3
 80007e0:	0c9b      	lsrs	r3, r3, #18
 80007e2:	3b01      	subs	r3, #1
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <HAL_InitTick+0xec>)
 80007e8:	4a21      	ldr	r2, [pc, #132]	; (8000870 <HAL_InitTick+0xf0>)
 80007ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <HAL_InitTick+0xec>)
 80007ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007f2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80007f4:	4a1d      	ldr	r2, [pc, #116]	; (800086c <HAL_InitTick+0xec>)
 80007f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <HAL_InitTick+0xec>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <HAL_InitTick+0xec>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <HAL_InitTick+0xec>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800080c:	4817      	ldr	r0, [pc, #92]	; (800086c <HAL_InitTick+0xec>)
 800080e:	f001 f821 	bl	8001854 <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000818:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800081c:	2b00      	cmp	r3, #0
 800081e:	d11b      	bne.n	8000858 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000820:	4812      	ldr	r0, [pc, #72]	; (800086c <HAL_InitTick+0xec>)
 8000822:	f001 f871 	bl	8001908 <HAL_TIM_Base_Start_IT>
 8000826:	4603      	mov	r3, r0
 8000828:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800082c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000830:	2b00      	cmp	r3, #0
 8000832:	d111      	bne.n	8000858 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000834:	201e      	movs	r0, #30
 8000836:	f000 f991 	bl	8000b5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	d808      	bhi.n	8000852 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000840:	2200      	movs	r2, #0
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	201e      	movs	r0, #30
 8000846:	f000 f96d 	bl	8000b24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <HAL_InitTick+0xf4>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	e002      	b.n	8000858 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800085c:	4618      	mov	r0, r3
 800085e:	3738      	adds	r7, #56	; 0x38
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	431bde83 	.word	0x431bde83
 800086c:	20000088 	.word	0x20000088
 8000870:	40000800 	.word	0x40000800
 8000874:	20000004 	.word	0x20000004

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800087c:	e7fe      	b.n	800087c <NMI_Handler+0x4>

0800087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler+0x4>

0800088a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <UsageFault_Handler+0x4>

08000896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <TIM4_IRQHandler+0x10>)
 80008aa:	f001 f88f 	bl	80019cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000088 	.word	0x20000088

080008b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008e2:	490e      	ldr	r1, [pc, #56]	; (800091c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008f8:	4c0b      	ldr	r4, [pc, #44]	; (8000928 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000906:	f7ff ffd7 	bl	80008b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090a:	f004 f83d 	bl	8004988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090e:	f7ff fe7b 	bl	8000608 <main>
  bx  lr    
 8000912:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000920:	08004b88 	.word	0x08004b88
  ldr r2, =_sbss
 8000924:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000928:	20004bfc 	.word	0x20004bfc

0800092c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <HAL_Init+0x40>)
 800093a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800093e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_Init+0x40>)
 8000946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800094a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x40>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x40>)
 8000952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f8d8 	bl	8000b0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f7ff ff0e 	bl	8000780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fee0 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023c00 	.word	0x40023c00

08000974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_IncTick+0x20>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x24>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <HAL_IncTick+0x24>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008
 8000998:	200000d0 	.word	0x200000d0

0800099c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <HAL_GetTick+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	200000d0 	.word	0x200000d0

080009b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d0:	4013      	ands	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <__NVIC_GetPriorityGrouping+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	f003 0307 	and.w	r3, r3, #7
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	db0b      	blt.n	8000a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	f003 021f 	and.w	r2, r3, #31
 8000a30:	4907      	ldr	r1, [pc, #28]	; (8000a50 <__NVIC_EnableIRQ+0x38>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	095b      	lsrs	r3, r3, #5
 8000a38:	2001      	movs	r0, #1
 8000a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e100 	.word	0xe000e100

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db0a      	blt.n	8000a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <__NVIC_SetPriority+0x4c>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	440b      	add	r3, r1
 8000a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7c:	e00a      	b.n	8000a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4908      	ldr	r1, [pc, #32]	; (8000aa4 <__NVIC_SetPriority+0x50>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	3b04      	subs	r3, #4
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	761a      	strb	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	bf28      	it	cs
 8000ac6:	2304      	movcs	r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3304      	adds	r3, #4
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ff4c 	bl	80009b4 <__NVIC_SetPriorityGrouping>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b36:	f7ff ff61 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8000b3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	68b9      	ldr	r1, [r7, #8]
 8000b40:	6978      	ldr	r0, [r7, #20]
 8000b42:	f7ff ffb1 	bl	8000aa8 <NVIC_EncodePriority>
 8000b46:	4602      	mov	r2, r0
 8000b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ff80 	bl	8000a54 <__NVIC_SetPriority>
}
 8000b54:	bf00      	nop
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ff54 	bl	8000a18 <__NVIC_EnableIRQ>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
 8000b92:	e159      	b.n	8000e48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b94:	2201      	movs	r2, #1
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	f040 8148 	bne.w	8000e42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 0303 	and.w	r3, r3, #3
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d005      	beq.n	8000bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d130      	bne.n	8000c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	4013      	ands	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	68da      	ldr	r2, [r3, #12]
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c00:	2201      	movs	r2, #1
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	091b      	lsrs	r3, r3, #4
 8000c16:	f003 0201 	and.w	r2, r3, #1
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d017      	beq.n	8000c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d123      	bne.n	8000cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	08da      	lsrs	r2, r3, #3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3208      	adds	r2, #8
 8000c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	f003 0307 	and.w	r3, r3, #7
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	220f      	movs	r2, #15
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	691a      	ldr	r2, [r3, #16]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	08da      	lsrs	r2, r3, #3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3208      	adds	r2, #8
 8000cb6:	69b9      	ldr	r1, [r7, #24]
 8000cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0203 	and.w	r2, r3, #3
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f000 80a2 	beq.w	8000e42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b57      	ldr	r3, [pc, #348]	; (8000e60 <HAL_GPIO_Init+0x2e8>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a56      	ldr	r2, [pc, #344]	; (8000e60 <HAL_GPIO_Init+0x2e8>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b54      	ldr	r3, [pc, #336]	; (8000e60 <HAL_GPIO_Init+0x2e8>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d1a:	4a52      	ldr	r2, [pc, #328]	; (8000e64 <HAL_GPIO_Init+0x2ec>)
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	3302      	adds	r3, #2
 8000d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	220f      	movs	r2, #15
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a49      	ldr	r2, [pc, #292]	; (8000e68 <HAL_GPIO_Init+0x2f0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d019      	beq.n	8000d7a <HAL_GPIO_Init+0x202>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a48      	ldr	r2, [pc, #288]	; (8000e6c <HAL_GPIO_Init+0x2f4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d013      	beq.n	8000d76 <HAL_GPIO_Init+0x1fe>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a47      	ldr	r2, [pc, #284]	; (8000e70 <HAL_GPIO_Init+0x2f8>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d00d      	beq.n	8000d72 <HAL_GPIO_Init+0x1fa>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a46      	ldr	r2, [pc, #280]	; (8000e74 <HAL_GPIO_Init+0x2fc>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d007      	beq.n	8000d6e <HAL_GPIO_Init+0x1f6>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a45      	ldr	r2, [pc, #276]	; (8000e78 <HAL_GPIO_Init+0x300>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_GPIO_Init+0x1f2>
 8000d66:	2304      	movs	r3, #4
 8000d68:	e008      	b.n	8000d7c <HAL_GPIO_Init+0x204>
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	e006      	b.n	8000d7c <HAL_GPIO_Init+0x204>
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e004      	b.n	8000d7c <HAL_GPIO_Init+0x204>
 8000d72:	2302      	movs	r3, #2
 8000d74:	e002      	b.n	8000d7c <HAL_GPIO_Init+0x204>
 8000d76:	2301      	movs	r3, #1
 8000d78:	e000      	b.n	8000d7c <HAL_GPIO_Init+0x204>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	69fa      	ldr	r2, [r7, #28]
 8000d7e:	f002 0203 	and.w	r2, r2, #3
 8000d82:	0092      	lsls	r2, r2, #2
 8000d84:	4093      	lsls	r3, r2
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d8c:	4935      	ldr	r1, [pc, #212]	; (8000e64 <HAL_GPIO_Init+0x2ec>)
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d9a:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <HAL_GPIO_Init+0x304>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dbe:	4a2f      	ldr	r2, [pc, #188]	; (8000e7c <HAL_GPIO_Init+0x304>)
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dc4:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <HAL_GPIO_Init+0x304>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000de8:	4a24      	ldr	r2, [pc, #144]	; (8000e7c <HAL_GPIO_Init+0x304>)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dee:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <HAL_GPIO_Init+0x304>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e12:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <HAL_GPIO_Init+0x304>)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_GPIO_Init+0x304>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e3c:	4a0f      	ldr	r2, [pc, #60]	; (8000e7c <HAL_GPIO_Init+0x304>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3301      	adds	r3, #1
 8000e46:	61fb      	str	r3, [r7, #28]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	2b0f      	cmp	r3, #15
 8000e4c:	f67f aea2 	bls.w	8000b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40013800 	.word	0x40013800
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	40020800 	.word	0x40020800
 8000e74:	40020c00 	.word	0x40020c00
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40013c00 	.word	0x40013c00

08000e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e90:	787b      	ldrb	r3, [r7, #1]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e96:	887a      	ldrh	r2, [r7, #2]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e9c:	e003      	b.n	8000ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	041a      	lsls	r2, r3, #16
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	619a      	str	r2, [r3, #24]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b085      	sub	sp, #20
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	041a      	lsls	r2, r3, #16
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	887b      	ldrh	r3, [r7, #2]
 8000ed2:	400b      	ands	r3, r1
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	619a      	str	r2, [r3, #24]
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e267      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d075      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f06:	4b88      	ldr	r3, [pc, #544]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 030c 	and.w	r3, r3, #12
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d00c      	beq.n	8000f2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f12:	4b85      	ldr	r3, [pc, #532]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d112      	bne.n	8000f44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1e:	4b82      	ldr	r3, [pc, #520]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f2a:	d10b      	bne.n	8000f44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2c:	4b7e      	ldr	r3, [pc, #504]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d05b      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x108>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d157      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e242      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f4c:	d106      	bne.n	8000f5c <HAL_RCC_OscConfig+0x74>
 8000f4e:	4b76      	ldr	r3, [pc, #472]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a75      	ldr	r2, [pc, #468]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e01d      	b.n	8000f98 <HAL_RCC_OscConfig+0xb0>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f64:	d10c      	bne.n	8000f80 <HAL_RCC_OscConfig+0x98>
 8000f66:	4b70      	ldr	r3, [pc, #448]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a6f      	ldr	r2, [pc, #444]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	4b6d      	ldr	r3, [pc, #436]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a6c      	ldr	r2, [pc, #432]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e00b      	b.n	8000f98 <HAL_RCC_OscConfig+0xb0>
 8000f80:	4b69      	ldr	r3, [pc, #420]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a68      	ldr	r2, [pc, #416]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b66      	ldr	r3, [pc, #408]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a65      	ldr	r2, [pc, #404]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d013      	beq.n	8000fc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fcfc 	bl	800099c <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa8:	f7ff fcf8 	bl	800099c <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b64      	cmp	r3, #100	; 0x64
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e207      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fba:	4b5b      	ldr	r3, [pc, #364]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f0      	beq.n	8000fa8 <HAL_RCC_OscConfig+0xc0>
 8000fc6:	e014      	b.n	8000ff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fce8 	bl	800099c <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fce4 	bl	800099c <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	; 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e1f3      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe2:	4b51      	ldr	r3, [pc, #324]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0xe8>
 8000fee:	e000      	b.n	8000ff2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d063      	beq.n	80010c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ffe:	4b4a      	ldr	r3, [pc, #296]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 030c 	and.w	r3, r3, #12
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00b      	beq.n	8001022 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800100a:	4b47      	ldr	r3, [pc, #284]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001012:	2b08      	cmp	r3, #8
 8001014:	d11c      	bne.n	8001050 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001016:	4b44      	ldr	r3, [pc, #272]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d116      	bne.n	8001050 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001022:	4b41      	ldr	r3, [pc, #260]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d005      	beq.n	800103a <HAL_RCC_OscConfig+0x152>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d001      	beq.n	800103a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e1c7      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103a:	4b3b      	ldr	r3, [pc, #236]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4937      	ldr	r1, [pc, #220]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 800104a:	4313      	orrs	r3, r2
 800104c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104e:	e03a      	b.n	80010c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d020      	beq.n	800109a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001058:	4b34      	ldr	r3, [pc, #208]	; (800112c <HAL_RCC_OscConfig+0x244>)
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105e:	f7ff fc9d 	bl	800099c <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001066:	f7ff fc99 	bl	800099c <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e1a8      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001078:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f0      	beq.n	8001066 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4925      	ldr	r1, [pc, #148]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 8001094:	4313      	orrs	r3, r2
 8001096:	600b      	str	r3, [r1, #0]
 8001098:	e015      	b.n	80010c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800109a:	4b24      	ldr	r3, [pc, #144]	; (800112c <HAL_RCC_OscConfig+0x244>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a0:	f7ff fc7c 	bl	800099c <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a8:	f7ff fc78 	bl	800099c <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e187      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d036      	beq.n	8001140 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d016      	beq.n	8001108 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_RCC_OscConfig+0x248>)
 80010dc:	2201      	movs	r2, #1
 80010de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010e0:	f7ff fc5c 	bl	800099c <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e8:	f7ff fc58 	bl	800099c <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e167      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_RCC_OscConfig+0x240>)
 80010fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f0      	beq.n	80010e8 <HAL_RCC_OscConfig+0x200>
 8001106:	e01b      	b.n	8001140 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_RCC_OscConfig+0x248>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110e:	f7ff fc45 	bl	800099c <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001114:	e00e      	b.n	8001134 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001116:	f7ff fc41 	bl	800099c <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d907      	bls.n	8001134 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e150      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
 8001128:	40023800 	.word	0x40023800
 800112c:	42470000 	.word	0x42470000
 8001130:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001134:	4b88      	ldr	r3, [pc, #544]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 8001136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1ea      	bne.n	8001116 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 8097 	beq.w	800127c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001152:	4b81      	ldr	r3, [pc, #516]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10f      	bne.n	800117e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	4b7d      	ldr	r3, [pc, #500]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	4a7c      	ldr	r2, [pc, #496]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	6413      	str	r3, [r2, #64]	; 0x40
 800116e:	4b7a      	ldr	r3, [pc, #488]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800117a:	2301      	movs	r3, #1
 800117c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117e:	4b77      	ldr	r3, [pc, #476]	; (800135c <HAL_RCC_OscConfig+0x474>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001186:	2b00      	cmp	r3, #0
 8001188:	d118      	bne.n	80011bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800118a:	4b74      	ldr	r3, [pc, #464]	; (800135c <HAL_RCC_OscConfig+0x474>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a73      	ldr	r2, [pc, #460]	; (800135c <HAL_RCC_OscConfig+0x474>)
 8001190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001196:	f7ff fc01 	bl	800099c <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119e:	f7ff fbfd 	bl	800099c <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e10c      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b0:	4b6a      	ldr	r3, [pc, #424]	; (800135c <HAL_RCC_OscConfig+0x474>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f0      	beq.n	800119e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d106      	bne.n	80011d2 <HAL_RCC_OscConfig+0x2ea>
 80011c4:	4b64      	ldr	r3, [pc, #400]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 80011c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c8:	4a63      	ldr	r2, [pc, #396]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6713      	str	r3, [r2, #112]	; 0x70
 80011d0:	e01c      	b.n	800120c <HAL_RCC_OscConfig+0x324>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b05      	cmp	r3, #5
 80011d8:	d10c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x30c>
 80011da:	4b5f      	ldr	r3, [pc, #380]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 80011dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011de:	4a5e      	ldr	r2, [pc, #376]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	6713      	str	r3, [r2, #112]	; 0x70
 80011e6:	4b5c      	ldr	r3, [pc, #368]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 80011e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ea:	4a5b      	ldr	r2, [pc, #364]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6713      	str	r3, [r2, #112]	; 0x70
 80011f2:	e00b      	b.n	800120c <HAL_RCC_OscConfig+0x324>
 80011f4:	4b58      	ldr	r3, [pc, #352]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 80011f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f8:	4a57      	ldr	r2, [pc, #348]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 80011fa:	f023 0301 	bic.w	r3, r3, #1
 80011fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001200:	4b55      	ldr	r3, [pc, #340]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 8001202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001204:	4a54      	ldr	r2, [pc, #336]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 8001206:	f023 0304 	bic.w	r3, r3, #4
 800120a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d015      	beq.n	8001240 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001214:	f7ff fbc2 	bl	800099c <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121a:	e00a      	b.n	8001232 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121c:	f7ff fbbe 	bl	800099c <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	f241 3288 	movw	r2, #5000	; 0x1388
 800122a:	4293      	cmp	r3, r2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e0cb      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001232:	4b49      	ldr	r3, [pc, #292]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 8001234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0ee      	beq.n	800121c <HAL_RCC_OscConfig+0x334>
 800123e:	e014      	b.n	800126a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001240:	f7ff fbac 	bl	800099c <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001246:	e00a      	b.n	800125e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001248:	f7ff fba8 	bl	800099c <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f241 3288 	movw	r2, #5000	; 0x1388
 8001256:	4293      	cmp	r3, r2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e0b5      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125e:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 8001260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1ee      	bne.n	8001248 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800126a:	7dfb      	ldrb	r3, [r7, #23]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d105      	bne.n	800127c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001270:	4b39      	ldr	r3, [pc, #228]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	4a38      	ldr	r2, [pc, #224]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 8001276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800127a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80a1 	beq.w	80013c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001286:	4b34      	ldr	r3, [pc, #208]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b08      	cmp	r3, #8
 8001290:	d05c      	beq.n	800134c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d141      	bne.n	800131e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129a:	4b31      	ldr	r3, [pc, #196]	; (8001360 <HAL_RCC_OscConfig+0x478>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fb7c 	bl	800099c <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a8:	f7ff fb78 	bl	800099c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e087      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ba:	4b27      	ldr	r3, [pc, #156]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69da      	ldr	r2, [r3, #28]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	019b      	lsls	r3, r3, #6
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012dc:	085b      	lsrs	r3, r3, #1
 80012de:	3b01      	subs	r3, #1
 80012e0:	041b      	lsls	r3, r3, #16
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	061b      	lsls	r3, r3, #24
 80012ea:	491b      	ldr	r1, [pc, #108]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <HAL_RCC_OscConfig+0x478>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff fb51 	bl	800099c <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fe:	f7ff fb4d 	bl	800099c <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e05c      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x416>
 800131c:	e054      	b.n	80013c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_RCC_OscConfig+0x478>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fb3a 	bl	800099c <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800132c:	f7ff fb36 	bl	800099c <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e045      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_RCC_OscConfig+0x470>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0x444>
 800134a:	e03d      	b.n	80013c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d107      	bne.n	8001364 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e038      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
 8001358:	40023800 	.word	0x40023800
 800135c:	40007000 	.word	0x40007000
 8001360:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_RCC_OscConfig+0x4ec>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d028      	beq.n	80013c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800137c:	429a      	cmp	r2, r3
 800137e:	d121      	bne.n	80013c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800138a:	429a      	cmp	r2, r3
 800138c:	d11a      	bne.n	80013c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001394:	4013      	ands	r3, r2
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800139a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800139c:	4293      	cmp	r3, r2
 800139e:	d111      	bne.n	80013c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	085b      	lsrs	r3, r3, #1
 80013ac:	3b01      	subs	r3, #1
 80013ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d107      	bne.n	80013c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d001      	beq.n	80013c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e000      	b.n	80013ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800

080013d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0cc      	b.n	8001586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013ec:	4b68      	ldr	r3, [pc, #416]	; (8001590 <HAL_RCC_ClockConfig+0x1b8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d90c      	bls.n	8001414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fa:	4b65      	ldr	r3, [pc, #404]	; (8001590 <HAL_RCC_ClockConfig+0x1b8>)
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001402:	4b63      	ldr	r3, [pc, #396]	; (8001590 <HAL_RCC_ClockConfig+0x1b8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d001      	beq.n	8001414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0b8      	b.n	8001586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d020      	beq.n	8001462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800142c:	4b59      	ldr	r3, [pc, #356]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4a58      	ldr	r2, [pc, #352]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 8001432:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001436:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001444:	4b53      	ldr	r3, [pc, #332]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4a52      	ldr	r2, [pc, #328]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800144e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001450:	4b50      	ldr	r3, [pc, #320]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	494d      	ldr	r1, [pc, #308]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	4313      	orrs	r3, r2
 8001460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d044      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d107      	bne.n	8001486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d119      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e07f      	b.n	8001586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d003      	beq.n	8001496 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001492:	2b03      	cmp	r3, #3
 8001494:	d107      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001496:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d109      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e06f      	b.n	8001586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a6:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e067      	b.n	8001586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b6:	4b37      	ldr	r3, [pc, #220]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f023 0203 	bic.w	r2, r3, #3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4934      	ldr	r1, [pc, #208]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c8:	f7ff fa68 	bl	800099c <HAL_GetTick>
 80014cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ce:	e00a      	b.n	80014e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d0:	f7ff fa64 	bl	800099c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f241 3288 	movw	r2, #5000	; 0x1388
 80014de:	4293      	cmp	r3, r2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e04f      	b.n	8001586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e6:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 020c 	and.w	r2, r3, #12
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d1eb      	bne.n	80014d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <HAL_RCC_ClockConfig+0x1b8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d20c      	bcs.n	8001520 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001506:	4b22      	ldr	r3, [pc, #136]	; (8001590 <HAL_RCC_ClockConfig+0x1b8>)
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <HAL_RCC_ClockConfig+0x1b8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d001      	beq.n	8001520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e032      	b.n	8001586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4916      	ldr	r1, [pc, #88]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	4313      	orrs	r3, r2
 800153c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d009      	beq.n	800155e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	490e      	ldr	r1, [pc, #56]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	4313      	orrs	r3, r2
 800155c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800155e:	f000 f821 	bl	80015a4 <HAL_RCC_GetSysClockFreq>
 8001562:	4602      	mov	r2, r0
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	490a      	ldr	r1, [pc, #40]	; (8001598 <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	5ccb      	ldrb	r3, [r1, r3]
 8001572:	fa22 f303 	lsr.w	r3, r2, r3
 8001576:	4a09      	ldr	r2, [pc, #36]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_RCC_ClockConfig+0x1c8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f8fe 	bl	8000780 <HAL_InitTick>

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023c00 	.word	0x40023c00
 8001594:	40023800 	.word	0x40023800
 8001598:	08004b60 	.word	0x08004b60
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000004 	.word	0x20000004

080015a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a8:	b094      	sub	sp, #80	; 0x50
 80015aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	647b      	str	r3, [r7, #68]	; 0x44
 80015b0:	2300      	movs	r3, #0
 80015b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015b4:	2300      	movs	r3, #0
 80015b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015bc:	4b79      	ldr	r3, [pc, #484]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d00d      	beq.n	80015e4 <HAL_RCC_GetSysClockFreq+0x40>
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	f200 80e1 	bhi.w	8001790 <HAL_RCC_GetSysClockFreq+0x1ec>
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <HAL_RCC_GetSysClockFreq+0x34>
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d003      	beq.n	80015de <HAL_RCC_GetSysClockFreq+0x3a>
 80015d6:	e0db      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015d8:	4b73      	ldr	r3, [pc, #460]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80015da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80015dc:	e0db      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015de:	4b73      	ldr	r3, [pc, #460]	; (80017ac <HAL_RCC_GetSysClockFreq+0x208>)
 80015e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80015e2:	e0d8      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e4:	4b6f      	ldr	r3, [pc, #444]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ee:	4b6d      	ldr	r3, [pc, #436]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d063      	beq.n	80016c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015fa:	4b6a      	ldr	r3, [pc, #424]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	099b      	lsrs	r3, r3, #6
 8001600:	2200      	movs	r2, #0
 8001602:	63bb      	str	r3, [r7, #56]	; 0x38
 8001604:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
 800160e:	2300      	movs	r3, #0
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
 8001612:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001616:	4622      	mov	r2, r4
 8001618:	462b      	mov	r3, r5
 800161a:	f04f 0000 	mov.w	r0, #0
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	0159      	lsls	r1, r3, #5
 8001624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001628:	0150      	lsls	r0, r2, #5
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4621      	mov	r1, r4
 8001630:	1a51      	subs	r1, r2, r1
 8001632:	6139      	str	r1, [r7, #16]
 8001634:	4629      	mov	r1, r5
 8001636:	eb63 0301 	sbc.w	r3, r3, r1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001648:	4659      	mov	r1, fp
 800164a:	018b      	lsls	r3, r1, #6
 800164c:	4651      	mov	r1, sl
 800164e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001652:	4651      	mov	r1, sl
 8001654:	018a      	lsls	r2, r1, #6
 8001656:	4651      	mov	r1, sl
 8001658:	ebb2 0801 	subs.w	r8, r2, r1
 800165c:	4659      	mov	r1, fp
 800165e:	eb63 0901 	sbc.w	r9, r3, r1
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800166e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001676:	4690      	mov	r8, r2
 8001678:	4699      	mov	r9, r3
 800167a:	4623      	mov	r3, r4
 800167c:	eb18 0303 	adds.w	r3, r8, r3
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	462b      	mov	r3, r5
 8001684:	eb49 0303 	adc.w	r3, r9, r3
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001696:	4629      	mov	r1, r5
 8001698:	024b      	lsls	r3, r1, #9
 800169a:	4621      	mov	r1, r4
 800169c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016a0:	4621      	mov	r1, r4
 80016a2:	024a      	lsls	r2, r1, #9
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016aa:	2200      	movs	r2, #0
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016b4:	f7fe fd94 	bl	80001e0 <__aeabi_uldivmod>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4613      	mov	r3, r2
 80016be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016c0:	e058      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c2:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	099b      	lsrs	r3, r3, #6
 80016c8:	2200      	movs	r2, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	4611      	mov	r1, r2
 80016ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016d2:	623b      	str	r3, [r7, #32]
 80016d4:	2300      	movs	r3, #0
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
 80016d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016dc:	4642      	mov	r2, r8
 80016de:	464b      	mov	r3, r9
 80016e0:	f04f 0000 	mov.w	r0, #0
 80016e4:	f04f 0100 	mov.w	r1, #0
 80016e8:	0159      	lsls	r1, r3, #5
 80016ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ee:	0150      	lsls	r0, r2, #5
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4641      	mov	r1, r8
 80016f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80016fa:	4649      	mov	r1, r9
 80016fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800170c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001710:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001714:	ebb2 040a 	subs.w	r4, r2, sl
 8001718:	eb63 050b 	sbc.w	r5, r3, fp
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	00eb      	lsls	r3, r5, #3
 8001726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800172a:	00e2      	lsls	r2, r4, #3
 800172c:	4614      	mov	r4, r2
 800172e:	461d      	mov	r5, r3
 8001730:	4643      	mov	r3, r8
 8001732:	18e3      	adds	r3, r4, r3
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	464b      	mov	r3, r9
 8001738:	eb45 0303 	adc.w	r3, r5, r3
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800174a:	4629      	mov	r1, r5
 800174c:	028b      	lsls	r3, r1, #10
 800174e:	4621      	mov	r1, r4
 8001750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001754:	4621      	mov	r1, r4
 8001756:	028a      	lsls	r2, r1, #10
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175e:	2200      	movs	r2, #0
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	61fa      	str	r2, [r7, #28]
 8001764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001768:	f7fe fd3a 	bl	80001e0 <__aeabi_uldivmod>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4613      	mov	r3, r2
 8001772:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	0c1b      	lsrs	r3, r3, #16
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	3301      	adds	r3, #1
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001788:	fbb2 f3f3 	udiv	r3, r2, r3
 800178c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800178e:	e002      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001792:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001798:	4618      	mov	r0, r3
 800179a:	3750      	adds	r7, #80	; 0x50
 800179c:	46bd      	mov	sp, r7
 800179e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	00f42400 	.word	0x00f42400
 80017ac:	007a1200 	.word	0x007a1200

080017b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000000 	.word	0x20000000

080017c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017cc:	f7ff fff0 	bl	80017b0 <HAL_RCC_GetHCLKFreq>
 80017d0:	4602      	mov	r2, r0
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	0a9b      	lsrs	r3, r3, #10
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	4903      	ldr	r1, [pc, #12]	; (80017ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80017de:	5ccb      	ldrb	r3, [r1, r3]
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	08004b70 	.word	0x08004b70

080017f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	220f      	movs	r2, #15
 80017fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_RCC_GetClockConfig+0x5c>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 0203 	and.w	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_RCC_GetClockConfig+0x5c>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_RCC_GetClockConfig+0x5c>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_RCC_GetClockConfig+0x5c>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	08db      	lsrs	r3, r3, #3
 800182a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <HAL_RCC_GetClockConfig+0x60>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0207 	and.w	r2, r3, #7
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	601a      	str	r2, [r3, #0]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40023c00 	.word	0x40023c00

08001854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e041      	b.n	80018ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d106      	bne.n	8001880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f839 	bl	80018f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3304      	adds	r3, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f000 f9ca 	bl	8001c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d001      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e044      	b.n	80019aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d018      	beq.n	8001974 <HAL_TIM_Base_Start_IT+0x6c>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800194a:	d013      	beq.n	8001974 <HAL_TIM_Base_Start_IT+0x6c>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1a      	ldr	r2, [pc, #104]	; (80019bc <HAL_TIM_Base_Start_IT+0xb4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00e      	beq.n	8001974 <HAL_TIM_Base_Start_IT+0x6c>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d009      	beq.n	8001974 <HAL_TIM_Base_Start_IT+0x6c>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d004      	beq.n	8001974 <HAL_TIM_Base_Start_IT+0x6c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d111      	bne.n	8001998 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b06      	cmp	r3, #6
 8001984:	d010      	beq.n	80019a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0201 	orr.w	r2, r2, #1
 8001994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001996:	e007      	b.n	80019a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40010000 	.word	0x40010000
 80019bc:	40000400 	.word	0x40000400
 80019c0:	40000800 	.word	0x40000800
 80019c4:	40000c00 	.word	0x40000c00
 80019c8:	40014000 	.word	0x40014000

080019cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d122      	bne.n	8001a28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d11b      	bne.n	8001a28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f06f 0202 	mvn.w	r2, #2
 80019f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f8ee 	bl	8001bf0 <HAL_TIM_IC_CaptureCallback>
 8001a14:	e005      	b.n	8001a22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f8e0 	bl	8001bdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f8f1 	bl	8001c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d122      	bne.n	8001a7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d11b      	bne.n	8001a7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f06f 0204 	mvn.w	r2, #4
 8001a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2202      	movs	r2, #2
 8001a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f8c4 	bl	8001bf0 <HAL_TIM_IC_CaptureCallback>
 8001a68:	e005      	b.n	8001a76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f8b6 	bl	8001bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f8c7 	bl	8001c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d122      	bne.n	8001ad0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d11b      	bne.n	8001ad0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f06f 0208 	mvn.w	r2, #8
 8001aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f89a 	bl	8001bf0 <HAL_TIM_IC_CaptureCallback>
 8001abc:	e005      	b.n	8001aca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f88c 	bl	8001bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f89d 	bl	8001c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b10      	cmp	r3, #16
 8001adc:	d122      	bne.n	8001b24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d11b      	bne.n	8001b24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f06f 0210 	mvn.w	r2, #16
 8001af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2208      	movs	r2, #8
 8001afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f870 	bl	8001bf0 <HAL_TIM_IC_CaptureCallback>
 8001b10:	e005      	b.n	8001b1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f862 	bl	8001bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f873 	bl	8001c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d10e      	bne.n	8001b50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d107      	bne.n	8001b50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0201 	mvn.w	r2, #1
 8001b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7fe fdd4 	bl	80006f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5a:	2b80      	cmp	r3, #128	; 0x80
 8001b5c:	d10e      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b68:	2b80      	cmp	r3, #128	; 0x80
 8001b6a:	d107      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f8e2 	bl	8001d40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b86:	2b40      	cmp	r3, #64	; 0x40
 8001b88:	d10e      	bne.n	8001ba8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b94:	2b40      	cmp	r3, #64	; 0x40
 8001b96:	d107      	bne.n	8001ba8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f838 	bl	8001c18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0320 	and.w	r3, r3, #32
 8001bc0:	2b20      	cmp	r3, #32
 8001bc2:	d107      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0220 	mvn.w	r2, #32
 8001bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f8ac 	bl	8001d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a34      	ldr	r2, [pc, #208]	; (8001d10 <TIM_Base_SetConfig+0xe4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d00f      	beq.n	8001c64 <TIM_Base_SetConfig+0x38>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4a:	d00b      	beq.n	8001c64 <TIM_Base_SetConfig+0x38>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a31      	ldr	r2, [pc, #196]	; (8001d14 <TIM_Base_SetConfig+0xe8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d007      	beq.n	8001c64 <TIM_Base_SetConfig+0x38>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a30      	ldr	r2, [pc, #192]	; (8001d18 <TIM_Base_SetConfig+0xec>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d003      	beq.n	8001c64 <TIM_Base_SetConfig+0x38>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a2f      	ldr	r2, [pc, #188]	; (8001d1c <TIM_Base_SetConfig+0xf0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d108      	bne.n	8001c76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a25      	ldr	r2, [pc, #148]	; (8001d10 <TIM_Base_SetConfig+0xe4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01b      	beq.n	8001cb6 <TIM_Base_SetConfig+0x8a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c84:	d017      	beq.n	8001cb6 <TIM_Base_SetConfig+0x8a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <TIM_Base_SetConfig+0xe8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <TIM_Base_SetConfig+0x8a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <TIM_Base_SetConfig+0xec>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00f      	beq.n	8001cb6 <TIM_Base_SetConfig+0x8a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a20      	ldr	r2, [pc, #128]	; (8001d1c <TIM_Base_SetConfig+0xf0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00b      	beq.n	8001cb6 <TIM_Base_SetConfig+0x8a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <TIM_Base_SetConfig+0xf4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d007      	beq.n	8001cb6 <TIM_Base_SetConfig+0x8a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <TIM_Base_SetConfig+0xf8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d003      	beq.n	8001cb6 <TIM_Base_SetConfig+0x8a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <TIM_Base_SetConfig+0xfc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d108      	bne.n	8001cc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <TIM_Base_SetConfig+0xe4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d103      	bne.n	8001cfc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	615a      	str	r2, [r3, #20]
}
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40000800 	.word	0x40000800
 8001d1c:	40000c00 	.word	0x40000c00
 8001d20:	40014000 	.word	0x40014000
 8001d24:	40014400 	.word	0x40014400
 8001d28:	40014800 	.word	0x40014800

08001d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <__NVIC_SetPriority>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	db0a      	blt.n	8001d7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	490c      	ldr	r1, [pc, #48]	; (8001da0 <__NVIC_SetPriority+0x4c>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	440b      	add	r3, r1
 8001d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d7c:	e00a      	b.n	8001d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4908      	ldr	r1, [pc, #32]	; (8001da4 <__NVIC_SetPriority+0x50>)
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3b04      	subs	r3, #4
 8001d8c:	0112      	lsls	r2, r2, #4
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	440b      	add	r3, r1
 8001d92:	761a      	strb	r2, [r3, #24]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <SysTick_Handler+0x1c>)
 8001dae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001db0:	f001 fd28 	bl	8003804 <xTaskGetSchedulerState>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d001      	beq.n	8001dbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001dba:	f002 fb0d 	bl	80043d8 <xPortSysTickHandler>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	e000e010 	.word	0xe000e010

08001dc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001dcc:	2100      	movs	r1, #0
 8001dce:	f06f 0004 	mvn.w	r0, #4
 8001dd2:	f7ff ffbf 	bl	8001d54 <__NVIC_SetPriority>
#endif
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001de2:	f3ef 8305 	mrs	r3, IPSR
 8001de6:	603b      	str	r3, [r7, #0]
  return(result);
 8001de8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001dee:	f06f 0305 	mvn.w	r3, #5
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	e00c      	b.n	8001e10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <osKernelInitialize+0x44>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d105      	bne.n	8001e0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <osKernelInitialize+0x44>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	e002      	b.n	8001e10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e10:	687b      	ldr	r3, [r7, #4]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	200000d4 	.word	0x200000d4

08001e24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e2a:	f3ef 8305 	mrs	r3, IPSR
 8001e2e:	603b      	str	r3, [r7, #0]
  return(result);
 8001e30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001e36:	f06f 0305 	mvn.w	r3, #5
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	e010      	b.n	8001e60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <osKernelStart+0x48>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d109      	bne.n	8001e5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e46:	f7ff ffbf 	bl	8001dc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <osKernelStart+0x48>)
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e50:	f001 f87c 	bl	8002f4c <vTaskStartScheduler>
      stat = osOK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	e002      	b.n	8001e60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e60:	687b      	ldr	r3, [r7, #4]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200000d4 	.word	0x200000d4

08001e70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08e      	sub	sp, #56	; 0x38
 8001e74:	af04      	add	r7, sp, #16
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e80:	f3ef 8305 	mrs	r3, IPSR
 8001e84:	617b      	str	r3, [r7, #20]
  return(result);
 8001e86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d17e      	bne.n	8001f8a <osThreadNew+0x11a>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d07b      	beq.n	8001f8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001e96:	2318      	movs	r3, #24
 8001e98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d045      	beq.n	8001f36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <osThreadNew+0x48>
        name = attr->name;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d008      	beq.n	8001ede <osThreadNew+0x6e>
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	2b38      	cmp	r3, #56	; 0x38
 8001ed0:	d805      	bhi.n	8001ede <osThreadNew+0x6e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <osThreadNew+0x72>
        return (NULL);
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e054      	b.n	8001f8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00e      	beq.n	8001f18 <osThreadNew+0xa8>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2ba7      	cmp	r3, #167	; 0xa7
 8001f00:	d90a      	bls.n	8001f18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d006      	beq.n	8001f18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <osThreadNew+0xa8>
        mem = 1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	e010      	b.n	8001f3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10c      	bne.n	8001f3a <osThreadNew+0xca>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d108      	bne.n	8001f3a <osThreadNew+0xca>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d104      	bne.n	8001f3a <osThreadNew+0xca>
          mem = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	e001      	b.n	8001f3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d110      	bne.n	8001f62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f48:	9202      	str	r2, [sp, #8]
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	6a3a      	ldr	r2, [r7, #32]
 8001f54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 fe0c 	bl	8002b74 <xTaskCreateStatic>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	e013      	b.n	8001f8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d110      	bne.n	8001f8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 fe57 	bl	8002c2e <xTaskCreate>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d001      	beq.n	8001f8a <osThreadNew+0x11a>
            hTask = NULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001f8a:	693b      	ldr	r3, [r7, #16]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f9c:	f3ef 8305 	mrs	r3, IPSR
 8001fa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fa2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <osDelay+0x1c>
    stat = osErrorISR;
 8001fa8:	f06f 0305 	mvn.w	r3, #5
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	e007      	b.n	8001fc0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 ff92 	bl	8002ee4 <vTaskDelay>
    }
  }

  return (stat);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001fdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <vApplicationGetIdleTaskMemory+0x30>)
 8001fe2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	601a      	str	r2, [r3, #0]
}
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	200000d8 	.word	0x200000d8
 8001ffc:	20000180 	.word	0x20000180

08002000 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4a07      	ldr	r2, [pc, #28]	; (800202c <vApplicationGetTimerTaskMemory+0x2c>)
 8002010:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	4a06      	ldr	r2, [pc, #24]	; (8002030 <vApplicationGetTimerTaskMemory+0x30>)
 8002016:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800201e:	601a      	str	r2, [r3, #0]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	20000380 	.word	0x20000380
 8002030:	20000428 	.word	0x20000428

08002034 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f103 0208 	add.w	r2, r3, #8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f103 0208 	add.w	r2, r3, #8
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f103 0208 	add.w	r2, r3, #8
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	601a      	str	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020d6:	b480      	push	{r7}
 80020d8:	b085      	sub	sp, #20
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d103      	bne.n	80020f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e00c      	b.n	8002110 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3308      	adds	r3, #8
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e002      	b.n	8002104 <vListInsert+0x2e>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	429a      	cmp	r2, r3
 800210e:	d2f6      	bcs.n	80020fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6892      	ldr	r2, [r2, #8]
 800215e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6852      	ldr	r2, [r2, #4]
 8002168:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	429a      	cmp	r2, r3
 8002172:	d103      	bne.n	800217c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	1e5a      	subs	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10a      	bne.n	80021c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	f3bf 8f6f 	isb	sy
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80021c2:	bf00      	nop
 80021c4:	e7fe      	b.n	80021c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80021c6:	f002 f875 	bl	80042b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d2:	68f9      	ldr	r1, [r7, #12]
 80021d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	441a      	add	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	3b01      	subs	r3, #1
 80021f8:	68f9      	ldr	r1, [r7, #12]
 80021fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	441a      	add	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	22ff      	movs	r2, #255	; 0xff
 800220a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	22ff      	movs	r2, #255	; 0xff
 8002212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d114      	bne.n	8002246 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01a      	beq.n	800225a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3310      	adds	r3, #16
 8002228:	4618      	mov	r0, r3
 800222a:	f001 f929 	bl	8003480 <xTaskRemoveFromEventList>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d012      	beq.n	800225a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <xQueueGenericReset+0xcc>)
 8002236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	f3bf 8f6f 	isb	sy
 8002244:	e009      	b.n	800225a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3310      	adds	r3, #16
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fef2 	bl	8002034 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3324      	adds	r3, #36	; 0x24
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff feed 	bl	8002034 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800225a:	f002 f85b 	bl	8004314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	e000ed04 	.word	0xe000ed04

0800226c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08e      	sub	sp, #56	; 0x38
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002292:	bf00      	nop
 8002294:	e7fe      	b.n	8002294 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10a      	bne.n	80022b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800229c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a0:	f383 8811 	msr	BASEPRI, r3
 80022a4:	f3bf 8f6f 	isb	sy
 80022a8:	f3bf 8f4f 	dsb	sy
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80022ae:	bf00      	nop
 80022b0:	e7fe      	b.n	80022b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <xQueueGenericCreateStatic+0x52>
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <xQueueGenericCreateStatic+0x56>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <xQueueGenericCreateStatic+0x58>
 80022c2:	2300      	movs	r3, #0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10a      	bne.n	80022de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80022c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022cc:	f383 8811 	msr	BASEPRI, r3
 80022d0:	f3bf 8f6f 	isb	sy
 80022d4:	f3bf 8f4f 	dsb	sy
 80022d8:	623b      	str	r3, [r7, #32]
}
 80022da:	bf00      	nop
 80022dc:	e7fe      	b.n	80022dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <xQueueGenericCreateStatic+0x7e>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <xQueueGenericCreateStatic+0x82>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <xQueueGenericCreateStatic+0x84>
 80022ee:	2300      	movs	r3, #0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10a      	bne.n	800230a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80022f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f8:	f383 8811 	msr	BASEPRI, r3
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	f3bf 8f4f 	dsb	sy
 8002304:	61fb      	str	r3, [r7, #28]
}
 8002306:	bf00      	nop
 8002308:	e7fe      	b.n	8002308 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800230a:	2350      	movs	r3, #80	; 0x50
 800230c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b50      	cmp	r3, #80	; 0x50
 8002312:	d00a      	beq.n	800232a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002318:	f383 8811 	msr	BASEPRI, r3
 800231c:	f3bf 8f6f 	isb	sy
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	61bb      	str	r3, [r7, #24]
}
 8002326:	bf00      	nop
 8002328:	e7fe      	b.n	8002328 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800232a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00d      	beq.n	8002352 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800233e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	4613      	mov	r3, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f805 	bl	800235c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002354:	4618      	mov	r0, r3
 8002356:	3730      	adds	r7, #48	; 0x30
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d103      	bne.n	8002378 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e002      	b.n	800237e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800238a:	2101      	movs	r1, #1
 800238c:	69b8      	ldr	r0, [r7, #24]
 800238e:	f7ff ff05 	bl	800219c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08e      	sub	sp, #56	; 0x38
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023b2:	2300      	movs	r3, #0
 80023b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10a      	bne.n	80023d6 <xQueueGenericSend+0x32>
	__asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023d2:	bf00      	nop
 80023d4:	e7fe      	b.n	80023d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d103      	bne.n	80023e4 <xQueueGenericSend+0x40>
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <xQueueGenericSend+0x44>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <xQueueGenericSend+0x46>
 80023e8:	2300      	movs	r3, #0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10a      	bne.n	8002404 <xQueueGenericSend+0x60>
	__asm volatile
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002400:	bf00      	nop
 8002402:	e7fe      	b.n	8002402 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d103      	bne.n	8002412 <xQueueGenericSend+0x6e>
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <xQueueGenericSend+0x72>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <xQueueGenericSend+0x74>
 8002416:	2300      	movs	r3, #0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <xQueueGenericSend+0x8e>
	__asm volatile
 800241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	623b      	str	r3, [r7, #32]
}
 800242e:	bf00      	nop
 8002430:	e7fe      	b.n	8002430 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002432:	f001 f9e7 	bl	8003804 <xTaskGetSchedulerState>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <xQueueGenericSend+0x9e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <xQueueGenericSend+0xa2>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <xQueueGenericSend+0xa4>
 8002446:	2300      	movs	r3, #0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <xQueueGenericSend+0xbe>
	__asm volatile
 800244c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	61fb      	str	r3, [r7, #28]
}
 800245e:	bf00      	nop
 8002460:	e7fe      	b.n	8002460 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002462:	f001 ff27 	bl	80042b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246e:	429a      	cmp	r2, r3
 8002470:	d302      	bcc.n	8002478 <xQueueGenericSend+0xd4>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d129      	bne.n	80024cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800247e:	f000 fa0b 	bl	8002898 <prvCopyDataToQueue>
 8002482:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	2b00      	cmp	r3, #0
 800248a:	d010      	beq.n	80024ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	3324      	adds	r3, #36	; 0x24
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fff5 	bl	8003480 <xTaskRemoveFromEventList>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800249c:	4b3f      	ldr	r3, [pc, #252]	; (800259c <xQueueGenericSend+0x1f8>)
 800249e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	e00a      	b.n	80024c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d007      	beq.n	80024c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024b4:	4b39      	ldr	r3, [pc, #228]	; (800259c <xQueueGenericSend+0x1f8>)
 80024b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	f3bf 8f4f 	dsb	sy
 80024c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024c4:	f001 ff26 	bl	8004314 <vPortExitCritical>
				return pdPASS;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e063      	b.n	8002594 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d103      	bne.n	80024da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024d2:	f001 ff1f 	bl	8004314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e05c      	b.n	8002594 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d106      	bne.n	80024ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 f82f 	bl	8003548 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024ea:	2301      	movs	r3, #1
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024ee:	f001 ff11 	bl	8004314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024f2:	f000 fd9b 	bl	800302c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024f6:	f001 fedd 	bl	80042b4 <vPortEnterCritical>
 80024fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002500:	b25b      	sxtb	r3, r3
 8002502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002506:	d103      	bne.n	8002510 <xQueueGenericSend+0x16c>
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002516:	b25b      	sxtb	r3, r3
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d103      	bne.n	8002526 <xQueueGenericSend+0x182>
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002526:	f001 fef5 	bl	8004314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800252a:	1d3a      	adds	r2, r7, #4
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	4611      	mov	r1, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f001 f81e 	bl	8003574 <xTaskCheckForTimeOut>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d124      	bne.n	8002588 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800253e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002540:	f000 faa2 	bl	8002a88 <prvIsQueueFull>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d018      	beq.n	800257c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	3310      	adds	r3, #16
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f000 ff44 	bl	80033e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800255a:	f000 fa2d 	bl	80029b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800255e:	f000 fd73 	bl	8003048 <xTaskResumeAll>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	f47f af7c 	bne.w	8002462 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <xQueueGenericSend+0x1f8>)
 800256c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	e772      	b.n	8002462 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800257c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800257e:	f000 fa1b 	bl	80029b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002582:	f000 fd61 	bl	8003048 <xTaskResumeAll>
 8002586:	e76c      	b.n	8002462 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800258a:	f000 fa15 	bl	80029b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800258e:	f000 fd5b 	bl	8003048 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002592:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002594:	4618      	mov	r0, r3
 8002596:	3738      	adds	r7, #56	; 0x38
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	e000ed04 	.word	0xe000ed04

080025a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b090      	sub	sp, #64	; 0x40
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80025b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80025b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025bc:	f383 8811 	msr	BASEPRI, r3
 80025c0:	f3bf 8f6f 	isb	sy
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025ca:	bf00      	nop
 80025cc:	e7fe      	b.n	80025cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d103      	bne.n	80025dc <xQueueGenericSendFromISR+0x3c>
 80025d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <xQueueGenericSendFromISR+0x40>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <xQueueGenericSendFromISR+0x42>
 80025e0:	2300      	movs	r3, #0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10a      	bne.n	80025fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80025e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025f8:	bf00      	nop
 80025fa:	e7fe      	b.n	80025fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d103      	bne.n	800260a <xQueueGenericSendFromISR+0x6a>
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <xQueueGenericSendFromISR+0x6e>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <xQueueGenericSendFromISR+0x70>
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10a      	bne.n	800262a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	623b      	str	r3, [r7, #32]
}
 8002626:	bf00      	nop
 8002628:	e7fe      	b.n	8002628 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800262a:	f001 ff25 	bl	8004478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800262e:	f3ef 8211 	mrs	r2, BASEPRI
 8002632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	61fa      	str	r2, [r7, #28]
 8002644:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002646:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	429a      	cmp	r2, r3
 8002654:	d302      	bcc.n	800265c <xQueueGenericSendFromISR+0xbc>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d12f      	bne.n	80026bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800265c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002672:	f000 f911 	bl	8002898 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002676:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800267a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267e:	d112      	bne.n	80026a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	2b00      	cmp	r3, #0
 8002686:	d016      	beq.n	80026b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268a:	3324      	adds	r3, #36	; 0x24
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fef7 	bl	8003480 <xTaskRemoveFromEventList>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00e      	beq.n	80026b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e007      	b.n	80026b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026aa:	3301      	adds	r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	b25a      	sxtb	r2, r3
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80026b6:	2301      	movs	r3, #1
 80026b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80026ba:	e001      	b.n	80026c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3740      	adds	r7, #64	; 0x40
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08c      	sub	sp, #48	; 0x30
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10a      	bne.n	8002708 <xQueueReceive+0x30>
	__asm volatile
 80026f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	623b      	str	r3, [r7, #32]
}
 8002704:	bf00      	nop
 8002706:	e7fe      	b.n	8002706 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d103      	bne.n	8002716 <xQueueReceive+0x3e>
 800270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <xQueueReceive+0x42>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <xQueueReceive+0x44>
 800271a:	2300      	movs	r3, #0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <xQueueReceive+0x5e>
	__asm volatile
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	61fb      	str	r3, [r7, #28]
}
 8002732:	bf00      	nop
 8002734:	e7fe      	b.n	8002734 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002736:	f001 f865 	bl	8003804 <xTaskGetSchedulerState>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <xQueueReceive+0x6e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <xQueueReceive+0x72>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <xQueueReceive+0x74>
 800274a:	2300      	movs	r3, #0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <xQueueReceive+0x8e>
	__asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	61bb      	str	r3, [r7, #24]
}
 8002762:	bf00      	nop
 8002764:	e7fe      	b.n	8002764 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002766:	f001 fda5 	bl	80042b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	2b00      	cmp	r3, #0
 8002774:	d01f      	beq.n	80027b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800277a:	f000 f8f7 	bl	800296c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	1e5a      	subs	r2, r3, #1
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00f      	beq.n	80027ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	3310      	adds	r3, #16
 8002792:	4618      	mov	r0, r3
 8002794:	f000 fe74 	bl	8003480 <xTaskRemoveFromEventList>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d007      	beq.n	80027ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800279e:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <xQueueReceive+0x1bc>)
 80027a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	f3bf 8f4f 	dsb	sy
 80027aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027ae:	f001 fdb1 	bl	8004314 <vPortExitCritical>
				return pdPASS;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e069      	b.n	800288a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d103      	bne.n	80027c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027bc:	f001 fdaa 	bl	8004314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e062      	b.n	800288a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027ca:	f107 0310 	add.w	r3, r7, #16
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 feba 	bl	8003548 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027d4:	2301      	movs	r3, #1
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027d8:	f001 fd9c 	bl	8004314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027dc:	f000 fc26 	bl	800302c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027e0:	f001 fd68 	bl	80042b4 <vPortEnterCritical>
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027ea:	b25b      	sxtb	r3, r3
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f0:	d103      	bne.n	80027fa <xQueueReceive+0x122>
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002800:	b25b      	sxtb	r3, r3
 8002802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002806:	d103      	bne.n	8002810 <xQueueReceive+0x138>
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002810:	f001 fd80 	bl	8004314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002814:	1d3a      	adds	r2, r7, #4
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fea9 	bl	8003574 <xTaskCheckForTimeOut>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d123      	bne.n	8002870 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800282a:	f000 f917 	bl	8002a5c <prvIsQueueEmpty>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d017      	beq.n	8002864 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	3324      	adds	r3, #36	; 0x24
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fdcf 	bl	80033e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002844:	f000 f8b8 	bl	80029b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002848:	f000 fbfe 	bl	8003048 <xTaskResumeAll>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d189      	bne.n	8002766 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <xQueueReceive+0x1bc>)
 8002854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	f3bf 8f4f 	dsb	sy
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	e780      	b.n	8002766 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002866:	f000 f8a7 	bl	80029b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800286a:	f000 fbed 	bl	8003048 <xTaskResumeAll>
 800286e:	e77a      	b.n	8002766 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002872:	f000 f8a1 	bl	80029b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002876:	f000 fbe7 	bl	8003048 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800287a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800287c:	f000 f8ee 	bl	8002a5c <prvIsQueueEmpty>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	f43f af6f 	beq.w	8002766 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002888:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800288a:	4618      	mov	r0, r3
 800288c:	3730      	adds	r7, #48	; 0x30
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	e000ed04 	.word	0xe000ed04

08002898 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10d      	bne.n	80028d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d14d      	bne.n	800295a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 ffbc 	bl	8003840 <xTaskPriorityDisinherit>
 80028c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	e043      	b.n	800295a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d119      	bne.n	800290c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6858      	ldr	r0, [r3, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	461a      	mov	r2, r3
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	f002 f876 	bl	80049d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	441a      	add	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d32b      	bcc.n	800295a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	e026      	b.n	800295a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	68d8      	ldr	r0, [r3, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	461a      	mov	r2, r3
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	f002 f85c 	bl	80049d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	425b      	negs	r3, r3
 8002926:	441a      	add	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d207      	bcs.n	8002948 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	425b      	negs	r3, r3
 8002942:	441a      	add	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d105      	bne.n	800295a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	3b01      	subs	r3, #1
 8002958:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002962:	697b      	ldr	r3, [r7, #20]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d018      	beq.n	80029b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	441a      	add	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	429a      	cmp	r2, r3
 8002996:	d303      	bcc.n	80029a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68d9      	ldr	r1, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	461a      	mov	r2, r3
 80029aa:	6838      	ldr	r0, [r7, #0]
 80029ac:	f002 f812 	bl	80049d4 <memcpy>
	}
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029c0:	f001 fc78 	bl	80042b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029cc:	e011      	b.n	80029f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d012      	beq.n	80029fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3324      	adds	r3, #36	; 0x24
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fd50 	bl	8003480 <xTaskRemoveFromEventList>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80029e6:	f000 fe27 	bl	8003638 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	dce9      	bgt.n	80029ce <prvUnlockQueue+0x16>
 80029fa:	e000      	b.n	80029fe <prvUnlockQueue+0x46>
					break;
 80029fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	22ff      	movs	r2, #255	; 0xff
 8002a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a06:	f001 fc85 	bl	8004314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a0a:	f001 fc53 	bl	80042b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a16:	e011      	b.n	8002a3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d012      	beq.n	8002a46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3310      	adds	r3, #16
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fd2b 	bl	8003480 <xTaskRemoveFromEventList>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a30:	f000 fe02 	bl	8003638 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a34:	7bbb      	ldrb	r3, [r7, #14]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	dce9      	bgt.n	8002a18 <prvUnlockQueue+0x60>
 8002a44:	e000      	b.n	8002a48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	22ff      	movs	r2, #255	; 0xff
 8002a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a50:	f001 fc60 	bl	8004314 <vPortExitCritical>
}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a64:	f001 fc26 	bl	80042b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d102      	bne.n	8002a76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a70:	2301      	movs	r3, #1
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	e001      	b.n	8002a7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a7a:	f001 fc4b 	bl	8004314 <vPortExitCritical>

	return xReturn;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a90:	f001 fc10 	bl	80042b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d102      	bne.n	8002aa6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e001      	b.n	8002aaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002aaa:	f001 fc33 	bl	8004314 <vPortExitCritical>

	return xReturn;
 8002aae:	68fb      	ldr	r3, [r7, #12]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	e014      	b.n	8002af2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ac8:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <vQueueAddToRegistry+0x50>)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10b      	bne.n	8002aec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ad4:	490c      	ldr	r1, [pc, #48]	; (8002b08 <vQueueAddToRegistry+0x50>)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <vQueueAddToRegistry+0x50>)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002aea:	e006      	b.n	8002afa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3301      	adds	r3, #1
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2b07      	cmp	r3, #7
 8002af6:	d9e7      	bls.n	8002ac8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000828 	.word	0x20000828

08002b0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b1c:	f001 fbca 	bl	80042b4 <vPortEnterCritical>
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b26:	b25b      	sxtb	r3, r3
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2c:	d103      	bne.n	8002b36 <vQueueWaitForMessageRestricted+0x2a>
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b3c:	b25b      	sxtb	r3, r3
 8002b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b42:	d103      	bne.n	8002b4c <vQueueWaitForMessageRestricted+0x40>
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b4c:	f001 fbe2 	bl	8004314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d106      	bne.n	8002b66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3324      	adds	r3, #36	; 0x24
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fc61 	bl	8003428 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b66:	6978      	ldr	r0, [r7, #20]
 8002b68:	f7ff ff26 	bl	80029b8 <prvUnlockQueue>
	}
 8002b6c:	bf00      	nop
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08e      	sub	sp, #56	; 0x38
 8002b78:	af04      	add	r7, sp, #16
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	623b      	str	r3, [r7, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	e7fe      	b.n	8002b9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10a      	bne.n	8002bba <xTaskCreateStatic+0x46>
	__asm volatile
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	61fb      	str	r3, [r7, #28]
}
 8002bb6:	bf00      	nop
 8002bb8:	e7fe      	b.n	8002bb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002bba:	23a8      	movs	r3, #168	; 0xa8
 8002bbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2ba8      	cmp	r3, #168	; 0xa8
 8002bc2:	d00a      	beq.n	8002bda <xTaskCreateStatic+0x66>
	__asm volatile
 8002bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	61bb      	str	r3, [r7, #24]
}
 8002bd6:	bf00      	nop
 8002bd8:	e7fe      	b.n	8002bd8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002bda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d01e      	beq.n	8002c20 <xTaskCreateStatic+0xac>
 8002be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01b      	beq.n	8002c20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	9303      	str	r3, [sp, #12]
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	9302      	str	r3, [sp, #8]
 8002c02:	f107 0314 	add.w	r3, r7, #20
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f850 	bl	8002cb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c1a:	f000 f8f3 	bl	8002e04 <prvAddNewTaskToReadyList>
 8002c1e:	e001      	b.n	8002c24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c24:	697b      	ldr	r3, [r7, #20]
	}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3728      	adds	r7, #40	; 0x28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b08c      	sub	sp, #48	; 0x30
 8002c32:	af04      	add	r7, sp, #16
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f001 fc58 	bl	80044f8 <pvPortMalloc>
 8002c48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00e      	beq.n	8002c6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c50:	20a8      	movs	r0, #168	; 0xa8
 8002c52:	f001 fc51 	bl	80044f8 <pvPortMalloc>
 8002c56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
 8002c64:	e005      	b.n	8002c72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c66:	6978      	ldr	r0, [r7, #20]
 8002c68:	f001 fd12 	bl	8004690 <vPortFree>
 8002c6c:	e001      	b.n	8002c72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d017      	beq.n	8002ca8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	2300      	movs	r3, #0
 8002c84:	9303      	str	r3, [sp, #12]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	9302      	str	r3, [sp, #8]
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f80e 	bl	8002cb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c9c:	69f8      	ldr	r0, [r7, #28]
 8002c9e:	f000 f8b1 	bl	8002e04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	e002      	b.n	8002cae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cae:	69bb      	ldr	r3, [r7, #24]
	}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	461a      	mov	r2, r3
 8002cd0:	21a5      	movs	r1, #165	; 0xa5
 8002cd2:	f001 fdfb 	bl	80048cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f023 0307 	bic.w	r3, r3, #7
 8002cee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	617b      	str	r3, [r7, #20]
}
 8002d0c:	bf00      	nop
 8002d0e:	e7fe      	b.n	8002d0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01f      	beq.n	8002d56 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	e012      	b.n	8002d42 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	7819      	ldrb	r1, [r3, #0]
 8002d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	4413      	add	r3, r2
 8002d2a:	3334      	adds	r3, #52	; 0x34
 8002d2c:	460a      	mov	r2, r1
 8002d2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	4413      	add	r3, r2
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	2b0f      	cmp	r3, #15
 8002d46:	d9e9      	bls.n	8002d1c <prvInitialiseNewTask+0x64>
 8002d48:	e000      	b.n	8002d4c <prvInitialiseNewTask+0x94>
			{
				break;
 8002d4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d54:	e003      	b.n	8002d5e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	2b37      	cmp	r3, #55	; 0x37
 8002d62:	d901      	bls.n	8002d68 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d64:	2337      	movs	r3, #55	; 0x37
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	2200      	movs	r2, #0
 8002d78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff f978 	bl	8002074 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	3318      	adds	r3, #24
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff f973 	bl	8002074 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	3354      	adds	r3, #84	; 0x54
 8002db8:	224c      	movs	r2, #76	; 0x4c
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 fd85 	bl	80048cc <memset>
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	4a0c      	ldr	r2, [pc, #48]	; (8002df8 <prvInitialiseNewTask+0x140>)
 8002dc6:	659a      	str	r2, [r3, #88]	; 0x58
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	4a0c      	ldr	r2, [pc, #48]	; (8002dfc <prvInitialiseNewTask+0x144>)
 8002dcc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	4a0b      	ldr	r2, [pc, #44]	; (8002e00 <prvInitialiseNewTask+0x148>)
 8002dd2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	68f9      	ldr	r1, [r7, #12]
 8002dd8:	69b8      	ldr	r0, [r7, #24]
 8002dda:	f001 f941 	bl	8004060 <pxPortInitialiseStack>
 8002dde:	4602      	mov	r2, r0
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002df0:	bf00      	nop
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20004abc 	.word	0x20004abc
 8002dfc:	20004b24 	.word	0x20004b24
 8002e00:	20004b8c 	.word	0x20004b8c

08002e04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e0c:	f001 fa52 	bl	80042b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e10:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <prvAddNewTaskToReadyList+0xc4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3301      	adds	r3, #1
 8002e16:	4a2c      	ldr	r2, [pc, #176]	; (8002ec8 <prvAddNewTaskToReadyList+0xc4>)
 8002e18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e1a:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <prvAddNewTaskToReadyList+0xc8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e22:	4a2a      	ldr	r2, [pc, #168]	; (8002ecc <prvAddNewTaskToReadyList+0xc8>)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e28:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <prvAddNewTaskToReadyList+0xc4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d110      	bne.n	8002e52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e30:	f000 fc26 	bl	8003680 <prvInitialiseTaskLists>
 8002e34:	e00d      	b.n	8002e52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e36:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <prvAddNewTaskToReadyList+0xcc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e3e:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <prvAddNewTaskToReadyList+0xc8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d802      	bhi.n	8002e52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ecc <prvAddNewTaskToReadyList+0xc8>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e52:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <prvAddNewTaskToReadyList+0xd0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3301      	adds	r3, #1
 8002e58:	4a1e      	ldr	r2, [pc, #120]	; (8002ed4 <prvAddNewTaskToReadyList+0xd0>)
 8002e5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <prvAddNewTaskToReadyList+0xd0>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e68:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <prvAddNewTaskToReadyList+0xd4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d903      	bls.n	8002e78 <prvAddNewTaskToReadyList+0x74>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <prvAddNewTaskToReadyList+0xd4>)
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4a15      	ldr	r2, [pc, #84]	; (8002edc <prvAddNewTaskToReadyList+0xd8>)
 8002e86:	441a      	add	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f7ff f8fd 	bl	800208e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e94:	f001 fa3e 	bl	8004314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e98:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <prvAddNewTaskToReadyList+0xcc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00e      	beq.n	8002ebe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <prvAddNewTaskToReadyList+0xc8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d207      	bcs.n	8002ebe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002eae:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <prvAddNewTaskToReadyList+0xdc>)
 8002eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000d3c 	.word	0x20000d3c
 8002ecc:	20000868 	.word	0x20000868
 8002ed0:	20000d48 	.word	0x20000d48
 8002ed4:	20000d58 	.word	0x20000d58
 8002ed8:	20000d44 	.word	0x20000d44
 8002edc:	2000086c 	.word	0x2000086c
 8002ee0:	e000ed04 	.word	0xe000ed04

08002ee4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d017      	beq.n	8002f26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <vTaskDelay+0x60>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <vTaskDelay+0x30>
	__asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	60bb      	str	r3, [r7, #8]
}
 8002f10:	bf00      	nop
 8002f12:	e7fe      	b.n	8002f12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f14:	f000 f88a 	bl	800302c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f18:	2100      	movs	r1, #0
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fcfe 	bl	800391c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f20:	f000 f892 	bl	8003048 <xTaskResumeAll>
 8002f24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d107      	bne.n	8002f3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <vTaskDelay+0x64>)
 8002f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000d64 	.word	0x20000d64
 8002f48:	e000ed04 	.word	0xe000ed04

08002f4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f5a:	463a      	mov	r2, r7
 8002f5c:	1d39      	adds	r1, r7, #4
 8002f5e:	f107 0308 	add.w	r3, r7, #8
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff f832 	bl	8001fcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f68:	6839      	ldr	r1, [r7, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	9202      	str	r2, [sp, #8]
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	2300      	movs	r3, #0
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2300      	movs	r3, #0
 8002f78:	460a      	mov	r2, r1
 8002f7a:	4924      	ldr	r1, [pc, #144]	; (800300c <vTaskStartScheduler+0xc0>)
 8002f7c:	4824      	ldr	r0, [pc, #144]	; (8003010 <vTaskStartScheduler+0xc4>)
 8002f7e:	f7ff fdf9 	bl	8002b74 <xTaskCreateStatic>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4a23      	ldr	r2, [pc, #140]	; (8003014 <vTaskStartScheduler+0xc8>)
 8002f86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f88:	4b22      	ldr	r3, [pc, #136]	; (8003014 <vTaskStartScheduler+0xc8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f90:	2301      	movs	r3, #1
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	e001      	b.n	8002f9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d102      	bne.n	8002fa6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002fa0:	f000 fd10 	bl	80039c4 <xTimerCreateTimerTask>
 8002fa4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d11b      	bne.n	8002fe4 <vTaskStartScheduler+0x98>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	613b      	str	r3, [r7, #16]
}
 8002fbe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002fc0:	4b15      	ldr	r3, [pc, #84]	; (8003018 <vTaskStartScheduler+0xcc>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3354      	adds	r3, #84	; 0x54
 8002fc6:	4a15      	ldr	r2, [pc, #84]	; (800301c <vTaskStartScheduler+0xd0>)
 8002fc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fca:	4b15      	ldr	r3, [pc, #84]	; (8003020 <vTaskStartScheduler+0xd4>)
 8002fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fd2:	4b14      	ldr	r3, [pc, #80]	; (8003024 <vTaskStartScheduler+0xd8>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fd8:	4b13      	ldr	r3, [pc, #76]	; (8003028 <vTaskStartScheduler+0xdc>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fde:	f001 f8c7 	bl	8004170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fe2:	e00e      	b.n	8003002 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d10a      	bne.n	8003002 <vTaskStartScheduler+0xb6>
	__asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	60fb      	str	r3, [r7, #12]
}
 8002ffe:	bf00      	nop
 8003000:	e7fe      	b.n	8003000 <vTaskStartScheduler+0xb4>
}
 8003002:	bf00      	nop
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	08004adc 	.word	0x08004adc
 8003010:	08003651 	.word	0x08003651
 8003014:	20000d60 	.word	0x20000d60
 8003018:	20000868 	.word	0x20000868
 800301c:	2000005c 	.word	0x2000005c
 8003020:	20000d5c 	.word	0x20000d5c
 8003024:	20000d48 	.word	0x20000d48
 8003028:	20000d40 	.word	0x20000d40

0800302c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <vTaskSuspendAll+0x18>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3301      	adds	r3, #1
 8003036:	4a03      	ldr	r2, [pc, #12]	; (8003044 <vTaskSuspendAll+0x18>)
 8003038:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800303a:	bf00      	nop
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	20000d64 	.word	0x20000d64

08003048 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003056:	4b42      	ldr	r3, [pc, #264]	; (8003160 <xTaskResumeAll+0x118>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10a      	bne.n	8003074 <xTaskResumeAll+0x2c>
	__asm volatile
 800305e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	603b      	str	r3, [r7, #0]
}
 8003070:	bf00      	nop
 8003072:	e7fe      	b.n	8003072 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003074:	f001 f91e 	bl	80042b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003078:	4b39      	ldr	r3, [pc, #228]	; (8003160 <xTaskResumeAll+0x118>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3b01      	subs	r3, #1
 800307e:	4a38      	ldr	r2, [pc, #224]	; (8003160 <xTaskResumeAll+0x118>)
 8003080:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003082:	4b37      	ldr	r3, [pc, #220]	; (8003160 <xTaskResumeAll+0x118>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d162      	bne.n	8003150 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800308a:	4b36      	ldr	r3, [pc, #216]	; (8003164 <xTaskResumeAll+0x11c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d05e      	beq.n	8003150 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003092:	e02f      	b.n	80030f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003094:	4b34      	ldr	r3, [pc, #208]	; (8003168 <xTaskResumeAll+0x120>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3318      	adds	r3, #24
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff f851 	bl	8002148 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3304      	adds	r3, #4
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff f84c 	bl	8002148 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b4:	4b2d      	ldr	r3, [pc, #180]	; (800316c <xTaskResumeAll+0x124>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d903      	bls.n	80030c4 <xTaskResumeAll+0x7c>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	4a2a      	ldr	r2, [pc, #168]	; (800316c <xTaskResumeAll+0x124>)
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4a27      	ldr	r2, [pc, #156]	; (8003170 <xTaskResumeAll+0x128>)
 80030d2:	441a      	add	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3304      	adds	r3, #4
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f7fe ffd7 	bl	800208e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e4:	4b23      	ldr	r3, [pc, #140]	; (8003174 <xTaskResumeAll+0x12c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80030ee:	4b22      	ldr	r3, [pc, #136]	; (8003178 <xTaskResumeAll+0x130>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030f4:	4b1c      	ldr	r3, [pc, #112]	; (8003168 <xTaskResumeAll+0x120>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1cb      	bne.n	8003094 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003102:	f000 fb5f 	bl	80037c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <xTaskResumeAll+0x134>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d010      	beq.n	8003134 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003112:	f000 f847 	bl	80031a4 <xTaskIncrementTick>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800311c:	4b16      	ldr	r3, [pc, #88]	; (8003178 <xTaskResumeAll+0x130>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3b01      	subs	r3, #1
 8003126:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f1      	bne.n	8003112 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800312e:	4b13      	ldr	r3, [pc, #76]	; (800317c <xTaskResumeAll+0x134>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <xTaskResumeAll+0x130>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d009      	beq.n	8003150 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800313c:	2301      	movs	r3, #1
 800313e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <xTaskResumeAll+0x138>)
 8003142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003150:	f001 f8e0 	bl	8004314 <vPortExitCritical>

	return xAlreadyYielded;
 8003154:	68bb      	ldr	r3, [r7, #8]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000d64 	.word	0x20000d64
 8003164:	20000d3c 	.word	0x20000d3c
 8003168:	20000cfc 	.word	0x20000cfc
 800316c:	20000d44 	.word	0x20000d44
 8003170:	2000086c 	.word	0x2000086c
 8003174:	20000868 	.word	0x20000868
 8003178:	20000d50 	.word	0x20000d50
 800317c:	20000d4c 	.word	0x20000d4c
 8003180:	e000ed04 	.word	0xe000ed04

08003184 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <xTaskGetTickCount+0x1c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003190:	687b      	ldr	r3, [r7, #4]
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000d40 	.word	0x20000d40

080031a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ae:	4b4f      	ldr	r3, [pc, #316]	; (80032ec <xTaskIncrementTick+0x148>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f040 808f 	bne.w	80032d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031b8:	4b4d      	ldr	r3, [pc, #308]	; (80032f0 <xTaskIncrementTick+0x14c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031c0:	4a4b      	ldr	r2, [pc, #300]	; (80032f0 <xTaskIncrementTick+0x14c>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d120      	bne.n	800320e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80031cc:	4b49      	ldr	r3, [pc, #292]	; (80032f4 <xTaskIncrementTick+0x150>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <xTaskIncrementTick+0x48>
	__asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	603b      	str	r3, [r7, #0]
}
 80031e8:	bf00      	nop
 80031ea:	e7fe      	b.n	80031ea <xTaskIncrementTick+0x46>
 80031ec:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <xTaskIncrementTick+0x150>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	4b41      	ldr	r3, [pc, #260]	; (80032f8 <xTaskIncrementTick+0x154>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a3f      	ldr	r2, [pc, #252]	; (80032f4 <xTaskIncrementTick+0x150>)
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	4a3f      	ldr	r2, [pc, #252]	; (80032f8 <xTaskIncrementTick+0x154>)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <xTaskIncrementTick+0x158>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3301      	adds	r3, #1
 8003206:	4a3d      	ldr	r2, [pc, #244]	; (80032fc <xTaskIncrementTick+0x158>)
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	f000 fadb 	bl	80037c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800320e:	4b3c      	ldr	r3, [pc, #240]	; (8003300 <xTaskIncrementTick+0x15c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	429a      	cmp	r2, r3
 8003216:	d349      	bcc.n	80032ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003218:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <xTaskIncrementTick+0x150>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d104      	bne.n	800322c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003222:	4b37      	ldr	r3, [pc, #220]	; (8003300 <xTaskIncrementTick+0x15c>)
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	601a      	str	r2, [r3, #0]
					break;
 800322a:	e03f      	b.n	80032ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800322c:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <xTaskIncrementTick+0x150>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	429a      	cmp	r2, r3
 8003242:	d203      	bcs.n	800324c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003244:	4a2e      	ldr	r2, [pc, #184]	; (8003300 <xTaskIncrementTick+0x15c>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800324a:	e02f      	b.n	80032ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	3304      	adds	r3, #4
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe ff79 	bl	8002148 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	3318      	adds	r3, #24
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe ff70 	bl	8002148 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326c:	4b25      	ldr	r3, [pc, #148]	; (8003304 <xTaskIncrementTick+0x160>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d903      	bls.n	800327c <xTaskIncrementTick+0xd8>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	4a22      	ldr	r2, [pc, #136]	; (8003304 <xTaskIncrementTick+0x160>)
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <xTaskIncrementTick+0x164>)
 800328a:	441a      	add	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	3304      	adds	r3, #4
 8003290:	4619      	mov	r1, r3
 8003292:	4610      	mov	r0, r2
 8003294:	f7fe fefb 	bl	800208e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <xTaskIncrementTick+0x168>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d3b8      	bcc.n	8003218 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80032a6:	2301      	movs	r3, #1
 80032a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032aa:	e7b5      	b.n	8003218 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032ac:	4b17      	ldr	r3, [pc, #92]	; (800330c <xTaskIncrementTick+0x168>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b2:	4915      	ldr	r1, [pc, #84]	; (8003308 <xTaskIncrementTick+0x164>)
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d901      	bls.n	80032c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <xTaskIncrementTick+0x16c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d007      	beq.n	80032e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80032d0:	2301      	movs	r3, #1
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	e004      	b.n	80032e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <xTaskIncrementTick+0x170>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3301      	adds	r3, #1
 80032dc:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <xTaskIncrementTick+0x170>)
 80032de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80032e0:	697b      	ldr	r3, [r7, #20]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000d64 	.word	0x20000d64
 80032f0:	20000d40 	.word	0x20000d40
 80032f4:	20000cf4 	.word	0x20000cf4
 80032f8:	20000cf8 	.word	0x20000cf8
 80032fc:	20000d54 	.word	0x20000d54
 8003300:	20000d5c 	.word	0x20000d5c
 8003304:	20000d44 	.word	0x20000d44
 8003308:	2000086c 	.word	0x2000086c
 800330c:	20000868 	.word	0x20000868
 8003310:	20000d50 	.word	0x20000d50
 8003314:	20000d4c 	.word	0x20000d4c

08003318 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800331e:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <vTaskSwitchContext+0xb0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003326:	4b29      	ldr	r3, [pc, #164]	; (80033cc <vTaskSwitchContext+0xb4>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800332c:	e046      	b.n	80033bc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800332e:	4b27      	ldr	r3, [pc, #156]	; (80033cc <vTaskSwitchContext+0xb4>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003334:	4b26      	ldr	r3, [pc, #152]	; (80033d0 <vTaskSwitchContext+0xb8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	e010      	b.n	800335e <vTaskSwitchContext+0x46>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <vTaskSwitchContext+0x40>
	__asm volatile
 8003342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	607b      	str	r3, [r7, #4]
}
 8003354:	bf00      	nop
 8003356:	e7fe      	b.n	8003356 <vTaskSwitchContext+0x3e>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3b01      	subs	r3, #1
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	491d      	ldr	r1, [pc, #116]	; (80033d4 <vTaskSwitchContext+0xbc>)
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0e4      	beq.n	800333c <vTaskSwitchContext+0x24>
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <vTaskSwitchContext+0xbc>)
 800337e:	4413      	add	r3, r2
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	605a      	str	r2, [r3, #4]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	3308      	adds	r3, #8
 8003394:	429a      	cmp	r2, r3
 8003396:	d104      	bne.n	80033a2 <vTaskSwitchContext+0x8a>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <vTaskSwitchContext+0xc0>)
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <vTaskSwitchContext+0xb8>)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <vTaskSwitchContext+0xc0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3354      	adds	r3, #84	; 0x54
 80033b8:	4a08      	ldr	r2, [pc, #32]	; (80033dc <vTaskSwitchContext+0xc4>)
 80033ba:	6013      	str	r3, [r2, #0]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	20000d64 	.word	0x20000d64
 80033cc:	20000d50 	.word	0x20000d50
 80033d0:	20000d44 	.word	0x20000d44
 80033d4:	2000086c 	.word	0x2000086c
 80033d8:	20000868 	.word	0x20000868
 80033dc:	2000005c 	.word	0x2000005c

080033e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	60fb      	str	r3, [r7, #12]
}
 8003402:	bf00      	nop
 8003404:	e7fe      	b.n	8003404 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003406:	4b07      	ldr	r3, [pc, #28]	; (8003424 <vTaskPlaceOnEventList+0x44>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3318      	adds	r3, #24
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fe fe61 	bl	80020d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003414:	2101      	movs	r1, #1
 8003416:	6838      	ldr	r0, [r7, #0]
 8003418:	f000 fa80 	bl	800391c <prvAddCurrentTaskToDelayedList>
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000868 	.word	0x20000868

08003428 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800343a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343e:	f383 8811 	msr	BASEPRI, r3
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	617b      	str	r3, [r7, #20]
}
 800344c:	bf00      	nop
 800344e:	e7fe      	b.n	800344e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <vTaskPlaceOnEventListRestricted+0x54>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3318      	adds	r3, #24
 8003456:	4619      	mov	r1, r3
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f7fe fe18 	bl	800208e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003464:	f04f 33ff 	mov.w	r3, #4294967295
 8003468:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	68b8      	ldr	r0, [r7, #8]
 800346e:	f000 fa55 	bl	800391c <prvAddCurrentTaskToDelayedList>
	}
 8003472:	bf00      	nop
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000868 	.word	0x20000868

08003480 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	60fb      	str	r3, [r7, #12]
}
 80034a8:	bf00      	nop
 80034aa:	e7fe      	b.n	80034aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	3318      	adds	r3, #24
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fe fe49 	bl	8002148 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034b6:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <xTaskRemoveFromEventList+0xb0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d11d      	bne.n	80034fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	3304      	adds	r3, #4
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe fe40 	bl	8002148 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034cc:	4b19      	ldr	r3, [pc, #100]	; (8003534 <xTaskRemoveFromEventList+0xb4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d903      	bls.n	80034dc <xTaskRemoveFromEventList+0x5c>
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <xTaskRemoveFromEventList+0xb4>)
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4a13      	ldr	r2, [pc, #76]	; (8003538 <xTaskRemoveFromEventList+0xb8>)
 80034ea:	441a      	add	r2, r3
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	3304      	adds	r3, #4
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f7fe fdcb 	bl	800208e <vListInsertEnd>
 80034f8:	e005      	b.n	8003506 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	3318      	adds	r3, #24
 80034fe:	4619      	mov	r1, r3
 8003500:	480e      	ldr	r0, [pc, #56]	; (800353c <xTaskRemoveFromEventList+0xbc>)
 8003502:	f7fe fdc4 	bl	800208e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <xTaskRemoveFromEventList+0xc0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	429a      	cmp	r2, r3
 8003512:	d905      	bls.n	8003520 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003514:	2301      	movs	r3, #1
 8003516:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <xTaskRemoveFromEventList+0xc4>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e001      	b.n	8003524 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003524:	697b      	ldr	r3, [r7, #20]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000d64 	.word	0x20000d64
 8003534:	20000d44 	.word	0x20000d44
 8003538:	2000086c 	.word	0x2000086c
 800353c:	20000cfc 	.word	0x20000cfc
 8003540:	20000868 	.word	0x20000868
 8003544:	20000d50 	.word	0x20000d50

08003548 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <vTaskInternalSetTimeOutState+0x24>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <vTaskInternalSetTimeOutState+0x28>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	605a      	str	r2, [r3, #4]
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	20000d54 	.word	0x20000d54
 8003570:	20000d40 	.word	0x20000d40

08003574 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	613b      	str	r3, [r7, #16]
}
 8003596:	bf00      	nop
 8003598:	e7fe      	b.n	8003598 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	60fb      	str	r3, [r7, #12]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80035b6:	f000 fe7d 	bl	80042b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035ba:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <xTaskCheckForTimeOut+0xbc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d102      	bne.n	80035da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	e023      	b.n	8003622 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b15      	ldr	r3, [pc, #84]	; (8003634 <xTaskCheckForTimeOut+0xc0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d007      	beq.n	80035f6 <xTaskCheckForTimeOut+0x82>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d302      	bcc.n	80035f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e015      	b.n	8003622 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d20b      	bcs.n	8003618 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	1ad2      	subs	r2, r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff9b 	bl	8003548 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	e004      	b.n	8003622 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800361e:	2301      	movs	r3, #1
 8003620:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003622:	f000 fe77 	bl	8004314 <vPortExitCritical>

	return xReturn;
 8003626:	69fb      	ldr	r3, [r7, #28]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000d40 	.word	0x20000d40
 8003634:	20000d54 	.word	0x20000d54

08003638 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800363c:	4b03      	ldr	r3, [pc, #12]	; (800364c <vTaskMissedYield+0x14>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	20000d50 	.word	0x20000d50

08003650 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003658:	f000 f852 	bl	8003700 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <prvIdleTask+0x28>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d9f9      	bls.n	8003658 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <prvIdleTask+0x2c>)
 8003666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003674:	e7f0      	b.n	8003658 <prvIdleTask+0x8>
 8003676:	bf00      	nop
 8003678:	2000086c 	.word	0x2000086c
 800367c:	e000ed04 	.word	0xe000ed04

08003680 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	e00c      	b.n	80036a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <prvInitialiseTaskLists+0x60>)
 8003698:	4413      	add	r3, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fcca 	bl	8002034 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3301      	adds	r3, #1
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b37      	cmp	r3, #55	; 0x37
 80036aa:	d9ef      	bls.n	800368c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036ac:	480d      	ldr	r0, [pc, #52]	; (80036e4 <prvInitialiseTaskLists+0x64>)
 80036ae:	f7fe fcc1 	bl	8002034 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036b2:	480d      	ldr	r0, [pc, #52]	; (80036e8 <prvInitialiseTaskLists+0x68>)
 80036b4:	f7fe fcbe 	bl	8002034 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036b8:	480c      	ldr	r0, [pc, #48]	; (80036ec <prvInitialiseTaskLists+0x6c>)
 80036ba:	f7fe fcbb 	bl	8002034 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036be:	480c      	ldr	r0, [pc, #48]	; (80036f0 <prvInitialiseTaskLists+0x70>)
 80036c0:	f7fe fcb8 	bl	8002034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036c4:	480b      	ldr	r0, [pc, #44]	; (80036f4 <prvInitialiseTaskLists+0x74>)
 80036c6:	f7fe fcb5 	bl	8002034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036ca:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <prvInitialiseTaskLists+0x78>)
 80036cc:	4a05      	ldr	r2, [pc, #20]	; (80036e4 <prvInitialiseTaskLists+0x64>)
 80036ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036d0:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <prvInitialiseTaskLists+0x7c>)
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <prvInitialiseTaskLists+0x68>)
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	2000086c 	.word	0x2000086c
 80036e4:	20000ccc 	.word	0x20000ccc
 80036e8:	20000ce0 	.word	0x20000ce0
 80036ec:	20000cfc 	.word	0x20000cfc
 80036f0:	20000d10 	.word	0x20000d10
 80036f4:	20000d28 	.word	0x20000d28
 80036f8:	20000cf4 	.word	0x20000cf4
 80036fc:	20000cf8 	.word	0x20000cf8

08003700 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003706:	e019      	b.n	800373c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003708:	f000 fdd4 	bl	80042b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800370c:	4b10      	ldr	r3, [pc, #64]	; (8003750 <prvCheckTasksWaitingTermination+0x50>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe fd15 	bl	8002148 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800371e:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <prvCheckTasksWaitingTermination+0x54>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <prvCheckTasksWaitingTermination+0x54>)
 8003726:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <prvCheckTasksWaitingTermination+0x58>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3b01      	subs	r3, #1
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <prvCheckTasksWaitingTermination+0x58>)
 8003730:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003732:	f000 fdef 	bl	8004314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f810 	bl	800375c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <prvCheckTasksWaitingTermination+0x58>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e1      	bne.n	8003708 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000d10 	.word	0x20000d10
 8003754:	20000d3c 	.word	0x20000d3c
 8003758:	20000d24 	.word	0x20000d24

0800375c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3354      	adds	r3, #84	; 0x54
 8003768:	4618      	mov	r0, r3
 800376a:	f001 f8b7 	bl	80048dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003774:	2b00      	cmp	r3, #0
 8003776:	d108      	bne.n	800378a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	4618      	mov	r0, r3
 800377e:	f000 ff87 	bl	8004690 <vPortFree>
				vPortFree( pxTCB );
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 ff84 	bl	8004690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003788:	e018      	b.n	80037bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003790:	2b01      	cmp	r3, #1
 8003792:	d103      	bne.n	800379c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 ff7b 	bl	8004690 <vPortFree>
	}
 800379a:	e00f      	b.n	80037bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d00a      	beq.n	80037bc <prvDeleteTCB+0x60>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	60fb      	str	r3, [r7, #12]
}
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <prvDeleteTCB+0x5e>
	}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037ca:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <prvResetNextTaskUnblockTime+0x38>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d104      	bne.n	80037de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <prvResetNextTaskUnblockTime+0x3c>)
 80037d6:	f04f 32ff 	mov.w	r2, #4294967295
 80037da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037dc:	e008      	b.n	80037f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <prvResetNextTaskUnblockTime+0x38>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4a04      	ldr	r2, [pc, #16]	; (8003800 <prvResetNextTaskUnblockTime+0x3c>)
 80037ee:	6013      	str	r3, [r2, #0]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	20000cf4 	.word	0x20000cf4
 8003800:	20000d5c 	.word	0x20000d5c

08003804 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <xTaskGetSchedulerState+0x34>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003812:	2301      	movs	r3, #1
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	e008      	b.n	800382a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <xTaskGetSchedulerState+0x38>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003820:	2302      	movs	r3, #2
 8003822:	607b      	str	r3, [r7, #4]
 8003824:	e001      	b.n	800382a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003826:	2300      	movs	r3, #0
 8003828:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800382a:	687b      	ldr	r3, [r7, #4]
	}
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	20000d48 	.word	0x20000d48
 800383c:	20000d64 	.word	0x20000d64

08003840 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d056      	beq.n	8003904 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003856:	4b2e      	ldr	r3, [pc, #184]	; (8003910 <xTaskPriorityDisinherit+0xd0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	429a      	cmp	r2, r3
 800385e:	d00a      	beq.n	8003876 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003864:	f383 8811 	msr	BASEPRI, r3
 8003868:	f3bf 8f6f 	isb	sy
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	60fb      	str	r3, [r7, #12]
}
 8003872:	bf00      	nop
 8003874:	e7fe      	b.n	8003874 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	60bb      	str	r3, [r7, #8]
}
 8003890:	bf00      	nop
 8003892:	e7fe      	b.n	8003892 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003898:	1e5a      	subs	r2, r3, #1
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d02c      	beq.n	8003904 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d128      	bne.n	8003904 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe fc46 	bl	8002148 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <xTaskPriorityDisinherit+0xd4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d903      	bls.n	80038e4 <xTaskPriorityDisinherit+0xa4>
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	4a0c      	ldr	r2, [pc, #48]	; (8003914 <xTaskPriorityDisinherit+0xd4>)
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4a09      	ldr	r2, [pc, #36]	; (8003918 <xTaskPriorityDisinherit+0xd8>)
 80038f2:	441a      	add	r2, r3
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	3304      	adds	r3, #4
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f7fe fbc7 	bl	800208e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003900:	2301      	movs	r3, #1
 8003902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003904:	697b      	ldr	r3, [r7, #20]
	}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000868 	.word	0x20000868
 8003914:	20000d44 	.word	0x20000d44
 8003918:	2000086c 	.word	0x2000086c

0800391c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003926:	4b21      	ldr	r3, [pc, #132]	; (80039ac <prvAddCurrentTaskToDelayedList+0x90>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800392c:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3304      	adds	r3, #4
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe fc08 	bl	8002148 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d10a      	bne.n	8003956 <prvAddCurrentTaskToDelayedList+0x3a>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003946:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3304      	adds	r3, #4
 800394c:	4619      	mov	r1, r3
 800394e:	4819      	ldr	r0, [pc, #100]	; (80039b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003950:	f7fe fb9d 	bl	800208e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003954:	e026      	b.n	80039a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4413      	add	r3, r2
 800395c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800395e:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	429a      	cmp	r2, r3
 800396c:	d209      	bcs.n	8003982 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800396e:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3304      	adds	r3, #4
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f7fe fbab 	bl	80020d6 <vListInsert>
}
 8003980:	e010      	b.n	80039a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3304      	adds	r3, #4
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f7fe fba1 	bl	80020d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	429a      	cmp	r2, r3
 800399c:	d202      	bcs.n	80039a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800399e:	4a08      	ldr	r2, [pc, #32]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	6013      	str	r3, [r2, #0]
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20000d40 	.word	0x20000d40
 80039b0:	20000868 	.word	0x20000868
 80039b4:	20000d28 	.word	0x20000d28
 80039b8:	20000cf8 	.word	0x20000cf8
 80039bc:	20000cf4 	.word	0x20000cf4
 80039c0:	20000d5c 	.word	0x20000d5c

080039c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08a      	sub	sp, #40	; 0x28
 80039c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80039ce:	f000 fb07 	bl	8003fe0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80039d2:	4b1c      	ldr	r3, [pc, #112]	; (8003a44 <xTimerCreateTimerTask+0x80>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d021      	beq.n	8003a1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80039e2:	1d3a      	adds	r2, r7, #4
 80039e4:	f107 0108 	add.w	r1, r7, #8
 80039e8:	f107 030c 	add.w	r3, r7, #12
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fb07 	bl	8002000 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	9202      	str	r2, [sp, #8]
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	2302      	movs	r3, #2
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	2300      	movs	r3, #0
 8003a02:	460a      	mov	r2, r1
 8003a04:	4910      	ldr	r1, [pc, #64]	; (8003a48 <xTimerCreateTimerTask+0x84>)
 8003a06:	4811      	ldr	r0, [pc, #68]	; (8003a4c <xTimerCreateTimerTask+0x88>)
 8003a08:	f7ff f8b4 	bl	8002b74 <xTaskCreateStatic>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	4a10      	ldr	r2, [pc, #64]	; (8003a50 <xTimerCreateTimerTask+0x8c>)
 8003a10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a12:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <xTimerCreateTimerTask+0x8c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	613b      	str	r3, [r7, #16]
}
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a3a:	697b      	ldr	r3, [r7, #20]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000d98 	.word	0x20000d98
 8003a48:	08004ae4 	.word	0x08004ae4
 8003a4c:	08003b89 	.word	0x08003b89
 8003a50:	20000d9c 	.word	0x20000d9c

08003a54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	; 0x28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	623b      	str	r3, [r7, #32]
}
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a82:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <xTimerGenericCommand+0x98>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d02a      	beq.n	8003ae0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b05      	cmp	r3, #5
 8003a9a:	dc18      	bgt.n	8003ace <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a9c:	f7ff feb2 	bl	8003804 <xTaskGetSchedulerState>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d109      	bne.n	8003aba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003aa6:	4b11      	ldr	r3, [pc, #68]	; (8003aec <xTimerGenericCommand+0x98>)
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	f107 0110 	add.w	r1, r7, #16
 8003aae:	2300      	movs	r3, #0
 8003ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab2:	f7fe fc77 	bl	80023a4 <xQueueGenericSend>
 8003ab6:	6278      	str	r0, [r7, #36]	; 0x24
 8003ab8:	e012      	b.n	8003ae0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <xTimerGenericCommand+0x98>)
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	f107 0110 	add.w	r1, r7, #16
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f7fe fc6d 	bl	80023a4 <xQueueGenericSend>
 8003aca:	6278      	str	r0, [r7, #36]	; 0x24
 8003acc:	e008      	b.n	8003ae0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ace:	4b07      	ldr	r3, [pc, #28]	; (8003aec <xTimerGenericCommand+0x98>)
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	f107 0110 	add.w	r1, r7, #16
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	f7fe fd61 	bl	80025a0 <xQueueGenericSendFromISR>
 8003ade:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3728      	adds	r7, #40	; 0x28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000d98 	.word	0x20000d98

08003af0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003afa:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <prvProcessExpiredTimer+0x94>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fe fb1d 	bl	8002148 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d022      	beq.n	8003b62 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	18d1      	adds	r1, r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	6978      	ldr	r0, [r7, #20]
 8003b2a:	f000 f8d1 	bl	8003cd0 <prvInsertTimerInActiveList>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01f      	beq.n	8003b74 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b34:	2300      	movs	r3, #0
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	6978      	ldr	r0, [r7, #20]
 8003b40:	f7ff ff88 	bl	8003a54 <xTimerGenericCommand>
 8003b44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d113      	bne.n	8003b74 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	60fb      	str	r3, [r7, #12]
}
 8003b5e:	bf00      	nop
 8003b60:	e7fe      	b.n	8003b60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	6978      	ldr	r0, [r7, #20]
 8003b7a:	4798      	blx	r3
}
 8003b7c:	bf00      	nop
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000d90 	.word	0x20000d90

08003b88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b90:	f107 0308 	add.w	r3, r7, #8
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 f857 	bl	8003c48 <prvGetNextExpireTime>
 8003b9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f803 	bl	8003bac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003ba6:	f000 f8d5 	bl	8003d54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003baa:	e7f1      	b.n	8003b90 <prvTimerTask+0x8>

08003bac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003bb6:	f7ff fa39 	bl	800302c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bba:	f107 0308 	add.w	r3, r7, #8
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 f866 	bl	8003c90 <prvSampleTimeNow>
 8003bc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d130      	bne.n	8003c2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <prvProcessTimerOrBlockTask+0x3c>
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d806      	bhi.n	8003be8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003bda:	f7ff fa35 	bl	8003048 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bde:	68f9      	ldr	r1, [r7, #12]
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ff85 	bl	8003af0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003be6:	e024      	b.n	8003c32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <prvProcessTimerOrBlockTask+0x90>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <prvProcessTimerOrBlockTask+0x50>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <prvProcessTimerOrBlockTask+0x52>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c00:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <prvProcessTimerOrBlockTask+0x94>)
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f7fe ff7d 	bl	8002b0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c12:	f7ff fa19 	bl	8003048 <xTaskResumeAll>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c1c:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <prvProcessTimerOrBlockTask+0x98>)
 8003c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	f3bf 8f6f 	isb	sy
}
 8003c2c:	e001      	b.n	8003c32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c2e:	f7ff fa0b 	bl	8003048 <xTaskResumeAll>
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000d94 	.word	0x20000d94
 8003c40:	20000d98 	.word	0x20000d98
 8003c44:	e000ed04 	.word	0xe000ed04

08003c48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c50:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <prvGetNextExpireTime+0x44>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <prvGetNextExpireTime+0x16>
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	e000      	b.n	8003c60 <prvGetNextExpireTime+0x18>
 8003c5e:	2200      	movs	r2, #0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c6c:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <prvGetNextExpireTime+0x44>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e001      	b.n	8003c7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000d90 	.word	0x20000d90

08003c90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c98:	f7ff fa74 	bl	8003184 <xTaskGetTickCount>
 8003c9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <prvSampleTimeNow+0x3c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d205      	bcs.n	8003cb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003ca8:	f000 f936 	bl	8003f18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e002      	b.n	8003cba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003cba:	4a04      	ldr	r2, [pc, #16]	; (8003ccc <prvSampleTimeNow+0x3c>)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000da0 	.word	0x20000da0

08003cd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d812      	bhi.n	8003d1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	1ad2      	subs	r2, r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d302      	bcc.n	8003d0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003d04:	2301      	movs	r3, #1
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e01b      	b.n	8003d42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d0a:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <prvInsertTimerInActiveList+0x7c>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4619      	mov	r1, r3
 8003d14:	4610      	mov	r0, r2
 8003d16:	f7fe f9de 	bl	80020d6 <vListInsert>
 8003d1a:	e012      	b.n	8003d42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d206      	bcs.n	8003d32 <prvInsertTimerInActiveList+0x62>
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d302      	bcc.n	8003d32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	e007      	b.n	8003d42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d32:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <prvInsertTimerInActiveList+0x80>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f7fe f9ca 	bl	80020d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d42:	697b      	ldr	r3, [r7, #20]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000d94 	.word	0x20000d94
 8003d50:	20000d90 	.word	0x20000d90

08003d54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08e      	sub	sp, #56	; 0x38
 8003d58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d5a:	e0ca      	b.n	8003ef2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	da18      	bge.n	8003d94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d62:	1d3b      	adds	r3, r7, #4
 8003d64:	3304      	adds	r3, #4
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	61fb      	str	r3, [r7, #28]
}
 8003d80:	bf00      	nop
 8003d82:	e7fe      	b.n	8003d82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d8a:	6850      	ldr	r0, [r2, #4]
 8003d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d8e:	6892      	ldr	r2, [r2, #8]
 8003d90:	4611      	mov	r1, r2
 8003d92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f2c0 80ab 	blt.w	8003ef2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d004      	beq.n	8003db2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	3304      	adds	r3, #4
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe f9cb 	bl	8002148 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003db2:	463b      	mov	r3, r7
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff6b 	bl	8003c90 <prvSampleTimeNow>
 8003dba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b09      	cmp	r3, #9
 8003dc0:	f200 8096 	bhi.w	8003ef0 <prvProcessReceivedCommands+0x19c>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <prvProcessReceivedCommands+0x78>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003df5 	.word	0x08003df5
 8003dd0:	08003df5 	.word	0x08003df5
 8003dd4:	08003df5 	.word	0x08003df5
 8003dd8:	08003e69 	.word	0x08003e69
 8003ddc:	08003e7d 	.word	0x08003e7d
 8003de0:	08003ec7 	.word	0x08003ec7
 8003de4:	08003df5 	.word	0x08003df5
 8003de8:	08003df5 	.word	0x08003df5
 8003dec:	08003e69 	.word	0x08003e69
 8003df0:	08003e7d 	.word	0x08003e7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	18d1      	adds	r1, r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e14:	f7ff ff5c 	bl	8003cd0 <prvInsertTimerInActiveList>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d069      	beq.n	8003ef2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d05e      	beq.n	8003ef2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	441a      	add	r2, r3
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	2300      	movs	r3, #0
 8003e42:	2100      	movs	r1, #0
 8003e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e46:	f7ff fe05 	bl	8003a54 <xTimerGenericCommand>
 8003e4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d14f      	bne.n	8003ef2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	61bb      	str	r3, [r7, #24]
}
 8003e64:	bf00      	nop
 8003e66:	e7fe      	b.n	8003e66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003e7a:	e03a      	b.n	8003ef2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	617b      	str	r3, [r7, #20]
}
 8003eae:	bf00      	nop
 8003eb0:	e7fe      	b.n	8003eb0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	18d1      	adds	r1, r2, r3
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ec0:	f7ff ff06 	bl	8003cd0 <prvInsertTimerInActiveList>
					break;
 8003ec4:	e015      	b.n	8003ef2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d103      	bne.n	8003edc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ed6:	f000 fbdb 	bl	8004690 <vPortFree>
 8003eda:	e00a      	b.n	8003ef2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003eee:	e000      	b.n	8003ef2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003ef0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ef2:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <prvProcessReceivedCommands+0x1c0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	1d39      	adds	r1, r7, #4
 8003ef8:	2200      	movs	r2, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe fbec 	bl	80026d8 <xQueueReceive>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f47f af2a 	bne.w	8003d5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	3730      	adds	r7, #48	; 0x30
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000d98 	.word	0x20000d98

08003f18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f1e:	e048      	b.n	8003fb2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f20:	4b2d      	ldr	r3, [pc, #180]	; (8003fd8 <prvSwitchTimerLists+0xc0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f2a:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <prvSwitchTimerLists+0xc0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fe f905 	bl	8002148 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d02e      	beq.n	8003fb2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d90e      	bls.n	8003f84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f72:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <prvSwitchTimerLists+0xc0>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	f7fe f8aa 	bl	80020d6 <vListInsert>
 8003f82:	e016      	b.n	8003fb2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f84:	2300      	movs	r3, #0
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7ff fd60 	bl	8003a54 <xTimerGenericCommand>
 8003f94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	603b      	str	r3, [r7, #0]
}
 8003fae:	bf00      	nop
 8003fb0:	e7fe      	b.n	8003fb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <prvSwitchTimerLists+0xc0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1b1      	bne.n	8003f20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <prvSwitchTimerLists+0xc0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <prvSwitchTimerLists+0xc4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <prvSwitchTimerLists+0xc0>)
 8003fc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003fca:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <prvSwitchTimerLists+0xc4>)
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	6013      	str	r3, [r2, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000d90 	.word	0x20000d90
 8003fdc:	20000d94 	.word	0x20000d94

08003fe0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003fe6:	f000 f965 	bl	80042b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <prvCheckForValidListAndQueue+0x60>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d120      	bne.n	8004034 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003ff2:	4814      	ldr	r0, [pc, #80]	; (8004044 <prvCheckForValidListAndQueue+0x64>)
 8003ff4:	f7fe f81e 	bl	8002034 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003ff8:	4813      	ldr	r0, [pc, #76]	; (8004048 <prvCheckForValidListAndQueue+0x68>)
 8003ffa:	f7fe f81b 	bl	8002034 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <prvCheckForValidListAndQueue+0x6c>)
 8004000:	4a10      	ldr	r2, [pc, #64]	; (8004044 <prvCheckForValidListAndQueue+0x64>)
 8004002:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004004:	4b12      	ldr	r3, [pc, #72]	; (8004050 <prvCheckForValidListAndQueue+0x70>)
 8004006:	4a10      	ldr	r2, [pc, #64]	; (8004048 <prvCheckForValidListAndQueue+0x68>)
 8004008:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800400a:	2300      	movs	r3, #0
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	4b11      	ldr	r3, [pc, #68]	; (8004054 <prvCheckForValidListAndQueue+0x74>)
 8004010:	4a11      	ldr	r2, [pc, #68]	; (8004058 <prvCheckForValidListAndQueue+0x78>)
 8004012:	2110      	movs	r1, #16
 8004014:	200a      	movs	r0, #10
 8004016:	f7fe f929 	bl	800226c <xQueueGenericCreateStatic>
 800401a:	4603      	mov	r3, r0
 800401c:	4a08      	ldr	r2, [pc, #32]	; (8004040 <prvCheckForValidListAndQueue+0x60>)
 800401e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004020:	4b07      	ldr	r3, [pc, #28]	; (8004040 <prvCheckForValidListAndQueue+0x60>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <prvCheckForValidListAndQueue+0x60>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	490b      	ldr	r1, [pc, #44]	; (800405c <prvCheckForValidListAndQueue+0x7c>)
 800402e:	4618      	mov	r0, r3
 8004030:	f7fe fd42 	bl	8002ab8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004034:	f000 f96e 	bl	8004314 <vPortExitCritical>
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000d98 	.word	0x20000d98
 8004044:	20000d68 	.word	0x20000d68
 8004048:	20000d7c 	.word	0x20000d7c
 800404c:	20000d90 	.word	0x20000d90
 8004050:	20000d94 	.word	0x20000d94
 8004054:	20000e44 	.word	0x20000e44
 8004058:	20000da4 	.word	0x20000da4
 800405c:	08004aec 	.word	0x08004aec

08004060 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3b04      	subs	r3, #4
 8004070:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3b04      	subs	r3, #4
 800407e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f023 0201 	bic.w	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3b04      	subs	r3, #4
 800408e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004090:	4a0c      	ldr	r2, [pc, #48]	; (80040c4 <pxPortInitialiseStack+0x64>)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3b14      	subs	r3, #20
 800409a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	3b04      	subs	r3, #4
 80040a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f06f 0202 	mvn.w	r2, #2
 80040ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	3b20      	subs	r3, #32
 80040b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040b6:	68fb      	ldr	r3, [r7, #12]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	080040c9 	.word	0x080040c9

080040c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040d2:	4b12      	ldr	r3, [pc, #72]	; (800411c <prvTaskExitError+0x54>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040da:	d00a      	beq.n	80040f2 <prvTaskExitError+0x2a>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	60fb      	str	r3, [r7, #12]
}
 80040ee:	bf00      	nop
 80040f0:	e7fe      	b.n	80040f0 <prvTaskExitError+0x28>
	__asm volatile
 80040f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f6:	f383 8811 	msr	BASEPRI, r3
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	60bb      	str	r3, [r7, #8]
}
 8004104:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004106:	bf00      	nop
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0fc      	beq.n	8004108 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	2000000c 	.word	0x2000000c

08004120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004120:	4b07      	ldr	r3, [pc, #28]	; (8004140 <pxCurrentTCBConst2>)
 8004122:	6819      	ldr	r1, [r3, #0]
 8004124:	6808      	ldr	r0, [r1, #0]
 8004126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412a:	f380 8809 	msr	PSP, r0
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f04f 0000 	mov.w	r0, #0
 8004136:	f380 8811 	msr	BASEPRI, r0
 800413a:	4770      	bx	lr
 800413c:	f3af 8000 	nop.w

08004140 <pxCurrentTCBConst2>:
 8004140:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop

08004148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004148:	4808      	ldr	r0, [pc, #32]	; (800416c <prvPortStartFirstTask+0x24>)
 800414a:	6800      	ldr	r0, [r0, #0]
 800414c:	6800      	ldr	r0, [r0, #0]
 800414e:	f380 8808 	msr	MSP, r0
 8004152:	f04f 0000 	mov.w	r0, #0
 8004156:	f380 8814 	msr	CONTROL, r0
 800415a:	b662      	cpsie	i
 800415c:	b661      	cpsie	f
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	df00      	svc	0
 8004168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800416a:	bf00      	nop
 800416c:	e000ed08 	.word	0xe000ed08

08004170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004176:	4b46      	ldr	r3, [pc, #280]	; (8004290 <xPortStartScheduler+0x120>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a46      	ldr	r2, [pc, #280]	; (8004294 <xPortStartScheduler+0x124>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d10a      	bne.n	8004196 <xPortStartScheduler+0x26>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	613b      	str	r3, [r7, #16]
}
 8004192:	bf00      	nop
 8004194:	e7fe      	b.n	8004194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004196:	4b3e      	ldr	r3, [pc, #248]	; (8004290 <xPortStartScheduler+0x120>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a3f      	ldr	r2, [pc, #252]	; (8004298 <xPortStartScheduler+0x128>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10a      	bne.n	80041b6 <xPortStartScheduler+0x46>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	60fb      	str	r3, [r7, #12]
}
 80041b2:	bf00      	nop
 80041b4:	e7fe      	b.n	80041b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041b6:	4b39      	ldr	r3, [pc, #228]	; (800429c <xPortStartScheduler+0x12c>)
 80041b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	22ff      	movs	r2, #255	; 0xff
 80041c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	4b31      	ldr	r3, [pc, #196]	; (80042a0 <xPortStartScheduler+0x130>)
 80041dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041de:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <xPortStartScheduler+0x134>)
 80041e0:	2207      	movs	r2, #7
 80041e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041e4:	e009      	b.n	80041fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80041e6:	4b2f      	ldr	r3, [pc, #188]	; (80042a4 <xPortStartScheduler+0x134>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	4a2d      	ldr	r2, [pc, #180]	; (80042a4 <xPortStartScheduler+0x134>)
 80041ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004202:	2b80      	cmp	r3, #128	; 0x80
 8004204:	d0ef      	beq.n	80041e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004206:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <xPortStartScheduler+0x134>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1c3 0307 	rsb	r3, r3, #7
 800420e:	2b04      	cmp	r3, #4
 8004210:	d00a      	beq.n	8004228 <xPortStartScheduler+0xb8>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	60bb      	str	r3, [r7, #8]
}
 8004224:	bf00      	nop
 8004226:	e7fe      	b.n	8004226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004228:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <xPortStartScheduler+0x134>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <xPortStartScheduler+0x134>)
 8004230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004232:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <xPortStartScheduler+0x134>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800423a:	4a1a      	ldr	r2, [pc, #104]	; (80042a4 <xPortStartScheduler+0x134>)
 800423c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004246:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <xPortStartScheduler+0x138>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a17      	ldr	r2, [pc, #92]	; (80042a8 <xPortStartScheduler+0x138>)
 800424c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004252:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <xPortStartScheduler+0x138>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a14      	ldr	r2, [pc, #80]	; (80042a8 <xPortStartScheduler+0x138>)
 8004258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800425c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800425e:	f000 f8dd 	bl	800441c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <xPortStartScheduler+0x13c>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004268:	f000 f8fc 	bl	8004464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800426c:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <xPortStartScheduler+0x140>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0f      	ldr	r2, [pc, #60]	; (80042b0 <xPortStartScheduler+0x140>)
 8004272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004278:	f7ff ff66 	bl	8004148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800427c:	f7ff f84c 	bl	8003318 <vTaskSwitchContext>
	prvTaskExitError();
 8004280:	f7ff ff22 	bl	80040c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	e000ed00 	.word	0xe000ed00
 8004294:	410fc271 	.word	0x410fc271
 8004298:	410fc270 	.word	0x410fc270
 800429c:	e000e400 	.word	0xe000e400
 80042a0:	20000e94 	.word	0x20000e94
 80042a4:	20000e98 	.word	0x20000e98
 80042a8:	e000ed20 	.word	0xe000ed20
 80042ac:	2000000c 	.word	0x2000000c
 80042b0:	e000ef34 	.word	0xe000ef34

080042b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
	__asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	607b      	str	r3, [r7, #4]
}
 80042cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042ce:	4b0f      	ldr	r3, [pc, #60]	; (800430c <vPortEnterCritical+0x58>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3301      	adds	r3, #1
 80042d4:	4a0d      	ldr	r2, [pc, #52]	; (800430c <vPortEnterCritical+0x58>)
 80042d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <vPortEnterCritical+0x58>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d10f      	bne.n	8004300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <vPortEnterCritical+0x5c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <vPortEnterCritical+0x4c>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	603b      	str	r3, [r7, #0]
}
 80042fc:	bf00      	nop
 80042fe:	e7fe      	b.n	80042fe <vPortEnterCritical+0x4a>
	}
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	2000000c 	.word	0x2000000c
 8004310:	e000ed04 	.word	0xe000ed04

08004314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <vPortExitCritical+0x50>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <vPortExitCritical+0x24>
	__asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	607b      	str	r3, [r7, #4]
}
 8004334:	bf00      	nop
 8004336:	e7fe      	b.n	8004336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004338:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <vPortExitCritical+0x50>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3b01      	subs	r3, #1
 800433e:	4a09      	ldr	r2, [pc, #36]	; (8004364 <vPortExitCritical+0x50>)
 8004340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004342:	4b08      	ldr	r3, [pc, #32]	; (8004364 <vPortExitCritical+0x50>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d105      	bne.n	8004356 <vPortExitCritical+0x42>
 800434a:	2300      	movs	r3, #0
 800434c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	f383 8811 	msr	BASEPRI, r3
}
 8004354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	2000000c 	.word	0x2000000c
	...

08004370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004370:	f3ef 8009 	mrs	r0, PSP
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <pxCurrentTCBConst>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	f01e 0f10 	tst.w	lr, #16
 8004380:	bf08      	it	eq
 8004382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438a:	6010      	str	r0, [r2, #0]
 800438c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004394:	f380 8811 	msr	BASEPRI, r0
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f7fe ffba 	bl	8003318 <vTaskSwitchContext>
 80043a4:	f04f 0000 	mov.w	r0, #0
 80043a8:	f380 8811 	msr	BASEPRI, r0
 80043ac:	bc09      	pop	{r0, r3}
 80043ae:	6819      	ldr	r1, [r3, #0]
 80043b0:	6808      	ldr	r0, [r1, #0]
 80043b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b6:	f01e 0f10 	tst.w	lr, #16
 80043ba:	bf08      	it	eq
 80043bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043c0:	f380 8809 	msr	PSP, r0
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	f3af 8000 	nop.w

080043d0 <pxCurrentTCBConst>:
 80043d0:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop

080043d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	607b      	str	r3, [r7, #4]
}
 80043f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043f2:	f7fe fed7 	bl	80031a4 <xTaskIncrementTick>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <xPortSysTickHandler+0x40>)
 80043fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	2300      	movs	r3, #0
 8004406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	f383 8811 	msr	BASEPRI, r3
}
 800440e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <vPortSetupTimerInterrupt+0x34>)
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <vPortSetupTimerInterrupt+0x38>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <vPortSetupTimerInterrupt+0x3c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a0a      	ldr	r2, [pc, #40]	; (800445c <vPortSetupTimerInterrupt+0x40>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	099b      	lsrs	r3, r3, #6
 8004438:	4a09      	ldr	r2, [pc, #36]	; (8004460 <vPortSetupTimerInterrupt+0x44>)
 800443a:	3b01      	subs	r3, #1
 800443c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800443e:	4b04      	ldr	r3, [pc, #16]	; (8004450 <vPortSetupTimerInterrupt+0x34>)
 8004440:	2207      	movs	r2, #7
 8004442:	601a      	str	r2, [r3, #0]
}
 8004444:	bf00      	nop
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	e000e010 	.word	0xe000e010
 8004454:	e000e018 	.word	0xe000e018
 8004458:	20000000 	.word	0x20000000
 800445c:	10624dd3 	.word	0x10624dd3
 8004460:	e000e014 	.word	0xe000e014

08004464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004474 <vPortEnableVFP+0x10>
 8004468:	6801      	ldr	r1, [r0, #0]
 800446a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800446e:	6001      	str	r1, [r0, #0]
 8004470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004472:	bf00      	nop
 8004474:	e000ed88 	.word	0xe000ed88

08004478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800447e:	f3ef 8305 	mrs	r3, IPSR
 8004482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b0f      	cmp	r3, #15
 8004488:	d914      	bls.n	80044b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800448a:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <vPortValidateInterruptPriority+0x70>)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004494:	4b15      	ldr	r3, [pc, #84]	; (80044ec <vPortValidateInterruptPriority+0x74>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	7afa      	ldrb	r2, [r7, #11]
 800449a:	429a      	cmp	r2, r3
 800449c:	d20a      	bcs.n	80044b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	607b      	str	r3, [r7, #4]
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044b4:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <vPortValidateInterruptPriority+0x78>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044bc:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <vPortValidateInterruptPriority+0x7c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d90a      	bls.n	80044da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	603b      	str	r3, [r7, #0]
}
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <vPortValidateInterruptPriority+0x60>
	}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	e000e3f0 	.word	0xe000e3f0
 80044ec:	20000e94 	.word	0x20000e94
 80044f0:	e000ed0c 	.word	0xe000ed0c
 80044f4:	20000e98 	.word	0x20000e98

080044f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004504:	f7fe fd92 	bl	800302c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004508:	4b5b      	ldr	r3, [pc, #364]	; (8004678 <pvPortMalloc+0x180>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004510:	f000 f920 	bl	8004754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004514:	4b59      	ldr	r3, [pc, #356]	; (800467c <pvPortMalloc+0x184>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	f040 8093 	bne.w	8004648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01d      	beq.n	8004564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004528:	2208      	movs	r2, #8
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4413      	add	r3, r2
 800452e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	2b00      	cmp	r3, #0
 8004538:	d014      	beq.n	8004564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f023 0307 	bic.w	r3, r3, #7
 8004540:	3308      	adds	r3, #8
 8004542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <pvPortMalloc+0x6c>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	617b      	str	r3, [r7, #20]
}
 8004560:	bf00      	nop
 8004562:	e7fe      	b.n	8004562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d06e      	beq.n	8004648 <pvPortMalloc+0x150>
 800456a:	4b45      	ldr	r3, [pc, #276]	; (8004680 <pvPortMalloc+0x188>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	429a      	cmp	r2, r3
 8004572:	d869      	bhi.n	8004648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004574:	4b43      	ldr	r3, [pc, #268]	; (8004684 <pvPortMalloc+0x18c>)
 8004576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004578:	4b42      	ldr	r3, [pc, #264]	; (8004684 <pvPortMalloc+0x18c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800457e:	e004      	b.n	800458a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	429a      	cmp	r2, r3
 8004592:	d903      	bls.n	800459c <pvPortMalloc+0xa4>
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f1      	bne.n	8004580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800459c:	4b36      	ldr	r3, [pc, #216]	; (8004678 <pvPortMalloc+0x180>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d050      	beq.n	8004648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2208      	movs	r2, #8
 80045ac:	4413      	add	r3, r2
 80045ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	1ad2      	subs	r2, r2, r3
 80045c0:	2308      	movs	r3, #8
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d91f      	bls.n	8004608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <pvPortMalloc+0xf8>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	613b      	str	r3, [r7, #16]
}
 80045ec:	bf00      	nop
 80045ee:	e7fe      	b.n	80045ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	1ad2      	subs	r2, r2, r3
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004602:	69b8      	ldr	r0, [r7, #24]
 8004604:	f000 f908 	bl	8004818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004608:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <pvPortMalloc+0x188>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <pvPortMalloc+0x188>)
 8004614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004616:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <pvPortMalloc+0x188>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b1b      	ldr	r3, [pc, #108]	; (8004688 <pvPortMalloc+0x190>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d203      	bcs.n	800462a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004622:	4b17      	ldr	r3, [pc, #92]	; (8004680 <pvPortMalloc+0x188>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a18      	ldr	r2, [pc, #96]	; (8004688 <pvPortMalloc+0x190>)
 8004628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	4b13      	ldr	r3, [pc, #76]	; (800467c <pvPortMalloc+0x184>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	431a      	orrs	r2, r3
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800463e:	4b13      	ldr	r3, [pc, #76]	; (800468c <pvPortMalloc+0x194>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3301      	adds	r3, #1
 8004644:	4a11      	ldr	r2, [pc, #68]	; (800468c <pvPortMalloc+0x194>)
 8004646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004648:	f7fe fcfe 	bl	8003048 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <pvPortMalloc+0x174>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	60fb      	str	r3, [r7, #12]
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <pvPortMalloc+0x172>
	return pvReturn;
 800466c:	69fb      	ldr	r3, [r7, #28]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3728      	adds	r7, #40	; 0x28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20004aa4 	.word	0x20004aa4
 800467c:	20004ab8 	.word	0x20004ab8
 8004680:	20004aa8 	.word	0x20004aa8
 8004684:	20004a9c 	.word	0x20004a9c
 8004688:	20004aac 	.word	0x20004aac
 800468c:	20004ab0 	.word	0x20004ab0

08004690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d04d      	beq.n	800473e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046a2:	2308      	movs	r3, #8
 80046a4:	425b      	negs	r3, r3
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4413      	add	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	4b24      	ldr	r3, [pc, #144]	; (8004748 <vPortFree+0xb8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10a      	bne.n	80046d4 <vPortFree+0x44>
	__asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	60fb      	str	r3, [r7, #12]
}
 80046d0:	bf00      	nop
 80046d2:	e7fe      	b.n	80046d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <vPortFree+0x62>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	60bb      	str	r3, [r7, #8]
}
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	4b14      	ldr	r3, [pc, #80]	; (8004748 <vPortFree+0xb8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01e      	beq.n	800473e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d11a      	bne.n	800473e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <vPortFree+0xb8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	43db      	mvns	r3, r3
 8004712:	401a      	ands	r2, r3
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004718:	f7fe fc88 	bl	800302c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <vPortFree+0xbc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4413      	add	r3, r2
 8004726:	4a09      	ldr	r2, [pc, #36]	; (800474c <vPortFree+0xbc>)
 8004728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800472a:	6938      	ldr	r0, [r7, #16]
 800472c:	f000 f874 	bl	8004818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <vPortFree+0xc0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3301      	adds	r3, #1
 8004736:	4a06      	ldr	r2, [pc, #24]	; (8004750 <vPortFree+0xc0>)
 8004738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800473a:	f7fe fc85 	bl	8003048 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800473e:	bf00      	nop
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20004ab8 	.word	0x20004ab8
 800474c:	20004aa8 	.word	0x20004aa8
 8004750:	20004ab4 	.word	0x20004ab4

08004754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800475a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800475e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004760:	4b27      	ldr	r3, [pc, #156]	; (8004800 <prvHeapInit+0xac>)
 8004762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00c      	beq.n	8004788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3307      	adds	r3, #7
 8004772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0307 	bic.w	r3, r3, #7
 800477a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	4a1f      	ldr	r2, [pc, #124]	; (8004800 <prvHeapInit+0xac>)
 8004784:	4413      	add	r3, r2
 8004786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800478c:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <prvHeapInit+0xb0>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <prvHeapInit+0xb0>)
 8004794:	2200      	movs	r2, #0
 8004796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	4413      	add	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047a0:	2208      	movs	r2, #8
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0307 	bic.w	r3, r3, #7
 80047ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4a15      	ldr	r2, [pc, #84]	; (8004808 <prvHeapInit+0xb4>)
 80047b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047b6:	4b14      	ldr	r3, [pc, #80]	; (8004808 <prvHeapInit+0xb4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2200      	movs	r2, #0
 80047bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <prvHeapInit+0xb4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	1ad2      	subs	r2, r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047d4:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <prvHeapInit+0xb4>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4a0a      	ldr	r2, [pc, #40]	; (800480c <prvHeapInit+0xb8>)
 80047e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a09      	ldr	r2, [pc, #36]	; (8004810 <prvHeapInit+0xbc>)
 80047ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <prvHeapInit+0xc0>)
 80047ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047f2:	601a      	str	r2, [r3, #0]
}
 80047f4:	bf00      	nop
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	20000e9c 	.word	0x20000e9c
 8004804:	20004a9c 	.word	0x20004a9c
 8004808:	20004aa4 	.word	0x20004aa4
 800480c:	20004aac 	.word	0x20004aac
 8004810:	20004aa8 	.word	0x20004aa8
 8004814:	20004ab8 	.word	0x20004ab8

08004818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004820:	4b28      	ldr	r3, [pc, #160]	; (80048c4 <prvInsertBlockIntoFreeList+0xac>)
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e002      	b.n	800482c <prvInsertBlockIntoFreeList+0x14>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	429a      	cmp	r2, r3
 8004834:	d8f7      	bhi.n	8004826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4413      	add	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	429a      	cmp	r2, r3
 8004846:	d108      	bne.n	800485a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	441a      	add	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	441a      	add	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d118      	bne.n	80048a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d00d      	beq.n	8004896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	441a      	add	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	e008      	b.n	80048a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e003      	b.n	80048a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d002      	beq.n	80048b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20004a9c 	.word	0x20004a9c
 80048c8:	20004aa4 	.word	0x20004aa4

080048cc <memset>:
 80048cc:	4402      	add	r2, r0
 80048ce:	4603      	mov	r3, r0
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d100      	bne.n	80048d6 <memset+0xa>
 80048d4:	4770      	bx	lr
 80048d6:	f803 1b01 	strb.w	r1, [r3], #1
 80048da:	e7f9      	b.n	80048d0 <memset+0x4>

080048dc <_reclaim_reent>:
 80048dc:	4b29      	ldr	r3, [pc, #164]	; (8004984 <_reclaim_reent+0xa8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4283      	cmp	r3, r0
 80048e2:	b570      	push	{r4, r5, r6, lr}
 80048e4:	4604      	mov	r4, r0
 80048e6:	d04b      	beq.n	8004980 <_reclaim_reent+0xa4>
 80048e8:	69c3      	ldr	r3, [r0, #28]
 80048ea:	b143      	cbz	r3, 80048fe <_reclaim_reent+0x22>
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d144      	bne.n	800497c <_reclaim_reent+0xa0>
 80048f2:	69e3      	ldr	r3, [r4, #28]
 80048f4:	6819      	ldr	r1, [r3, #0]
 80048f6:	b111      	cbz	r1, 80048fe <_reclaim_reent+0x22>
 80048f8:	4620      	mov	r0, r4
 80048fa:	f000 f879 	bl	80049f0 <_free_r>
 80048fe:	6961      	ldr	r1, [r4, #20]
 8004900:	b111      	cbz	r1, 8004908 <_reclaim_reent+0x2c>
 8004902:	4620      	mov	r0, r4
 8004904:	f000 f874 	bl	80049f0 <_free_r>
 8004908:	69e1      	ldr	r1, [r4, #28]
 800490a:	b111      	cbz	r1, 8004912 <_reclaim_reent+0x36>
 800490c:	4620      	mov	r0, r4
 800490e:	f000 f86f 	bl	80049f0 <_free_r>
 8004912:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004914:	b111      	cbz	r1, 800491c <_reclaim_reent+0x40>
 8004916:	4620      	mov	r0, r4
 8004918:	f000 f86a 	bl	80049f0 <_free_r>
 800491c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800491e:	b111      	cbz	r1, 8004926 <_reclaim_reent+0x4a>
 8004920:	4620      	mov	r0, r4
 8004922:	f000 f865 	bl	80049f0 <_free_r>
 8004926:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004928:	b111      	cbz	r1, 8004930 <_reclaim_reent+0x54>
 800492a:	4620      	mov	r0, r4
 800492c:	f000 f860 	bl	80049f0 <_free_r>
 8004930:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004932:	b111      	cbz	r1, 800493a <_reclaim_reent+0x5e>
 8004934:	4620      	mov	r0, r4
 8004936:	f000 f85b 	bl	80049f0 <_free_r>
 800493a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800493c:	b111      	cbz	r1, 8004944 <_reclaim_reent+0x68>
 800493e:	4620      	mov	r0, r4
 8004940:	f000 f856 	bl	80049f0 <_free_r>
 8004944:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004946:	b111      	cbz	r1, 800494e <_reclaim_reent+0x72>
 8004948:	4620      	mov	r0, r4
 800494a:	f000 f851 	bl	80049f0 <_free_r>
 800494e:	6a23      	ldr	r3, [r4, #32]
 8004950:	b1b3      	cbz	r3, 8004980 <_reclaim_reent+0xa4>
 8004952:	4620      	mov	r0, r4
 8004954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004958:	4718      	bx	r3
 800495a:	5949      	ldr	r1, [r1, r5]
 800495c:	b941      	cbnz	r1, 8004970 <_reclaim_reent+0x94>
 800495e:	3504      	adds	r5, #4
 8004960:	69e3      	ldr	r3, [r4, #28]
 8004962:	2d80      	cmp	r5, #128	; 0x80
 8004964:	68d9      	ldr	r1, [r3, #12]
 8004966:	d1f8      	bne.n	800495a <_reclaim_reent+0x7e>
 8004968:	4620      	mov	r0, r4
 800496a:	f000 f841 	bl	80049f0 <_free_r>
 800496e:	e7c0      	b.n	80048f2 <_reclaim_reent+0x16>
 8004970:	680e      	ldr	r6, [r1, #0]
 8004972:	4620      	mov	r0, r4
 8004974:	f000 f83c 	bl	80049f0 <_free_r>
 8004978:	4631      	mov	r1, r6
 800497a:	e7ef      	b.n	800495c <_reclaim_reent+0x80>
 800497c:	2500      	movs	r5, #0
 800497e:	e7ef      	b.n	8004960 <_reclaim_reent+0x84>
 8004980:	bd70      	pop	{r4, r5, r6, pc}
 8004982:	bf00      	nop
 8004984:	2000005c 	.word	0x2000005c

08004988 <__libc_init_array>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	4d0d      	ldr	r5, [pc, #52]	; (80049c0 <__libc_init_array+0x38>)
 800498c:	4c0d      	ldr	r4, [pc, #52]	; (80049c4 <__libc_init_array+0x3c>)
 800498e:	1b64      	subs	r4, r4, r5
 8004990:	10a4      	asrs	r4, r4, #2
 8004992:	2600      	movs	r6, #0
 8004994:	42a6      	cmp	r6, r4
 8004996:	d109      	bne.n	80049ac <__libc_init_array+0x24>
 8004998:	4d0b      	ldr	r5, [pc, #44]	; (80049c8 <__libc_init_array+0x40>)
 800499a:	4c0c      	ldr	r4, [pc, #48]	; (80049cc <__libc_init_array+0x44>)
 800499c:	f000 f880 	bl	8004aa0 <_init>
 80049a0:	1b64      	subs	r4, r4, r5
 80049a2:	10a4      	asrs	r4, r4, #2
 80049a4:	2600      	movs	r6, #0
 80049a6:	42a6      	cmp	r6, r4
 80049a8:	d105      	bne.n	80049b6 <__libc_init_array+0x2e>
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b0:	4798      	blx	r3
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7ee      	b.n	8004994 <__libc_init_array+0xc>
 80049b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ba:	4798      	blx	r3
 80049bc:	3601      	adds	r6, #1
 80049be:	e7f2      	b.n	80049a6 <__libc_init_array+0x1e>
 80049c0:	08004b80 	.word	0x08004b80
 80049c4:	08004b80 	.word	0x08004b80
 80049c8:	08004b80 	.word	0x08004b80
 80049cc:	08004b84 	.word	0x08004b84

080049d0 <__retarget_lock_acquire_recursive>:
 80049d0:	4770      	bx	lr

080049d2 <__retarget_lock_release_recursive>:
 80049d2:	4770      	bx	lr

080049d4 <memcpy>:
 80049d4:	440a      	add	r2, r1
 80049d6:	4291      	cmp	r1, r2
 80049d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80049dc:	d100      	bne.n	80049e0 <memcpy+0xc>
 80049de:	4770      	bx	lr
 80049e0:	b510      	push	{r4, lr}
 80049e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049ea:	4291      	cmp	r1, r2
 80049ec:	d1f9      	bne.n	80049e2 <memcpy+0xe>
 80049ee:	bd10      	pop	{r4, pc}

080049f0 <_free_r>:
 80049f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049f2:	2900      	cmp	r1, #0
 80049f4:	d044      	beq.n	8004a80 <_free_r+0x90>
 80049f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049fa:	9001      	str	r0, [sp, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f1a1 0404 	sub.w	r4, r1, #4
 8004a02:	bfb8      	it	lt
 8004a04:	18e4      	addlt	r4, r4, r3
 8004a06:	f000 f83f 	bl	8004a88 <__malloc_lock>
 8004a0a:	4a1e      	ldr	r2, [pc, #120]	; (8004a84 <_free_r+0x94>)
 8004a0c:	9801      	ldr	r0, [sp, #4]
 8004a0e:	6813      	ldr	r3, [r2, #0]
 8004a10:	b933      	cbnz	r3, 8004a20 <_free_r+0x30>
 8004a12:	6063      	str	r3, [r4, #4]
 8004a14:	6014      	str	r4, [r2, #0]
 8004a16:	b003      	add	sp, #12
 8004a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a1c:	f000 b83a 	b.w	8004a94 <__malloc_unlock>
 8004a20:	42a3      	cmp	r3, r4
 8004a22:	d908      	bls.n	8004a36 <_free_r+0x46>
 8004a24:	6825      	ldr	r5, [r4, #0]
 8004a26:	1961      	adds	r1, r4, r5
 8004a28:	428b      	cmp	r3, r1
 8004a2a:	bf01      	itttt	eq
 8004a2c:	6819      	ldreq	r1, [r3, #0]
 8004a2e:	685b      	ldreq	r3, [r3, #4]
 8004a30:	1949      	addeq	r1, r1, r5
 8004a32:	6021      	streq	r1, [r4, #0]
 8004a34:	e7ed      	b.n	8004a12 <_free_r+0x22>
 8004a36:	461a      	mov	r2, r3
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	b10b      	cbz	r3, 8004a40 <_free_r+0x50>
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	d9fa      	bls.n	8004a36 <_free_r+0x46>
 8004a40:	6811      	ldr	r1, [r2, #0]
 8004a42:	1855      	adds	r5, r2, r1
 8004a44:	42a5      	cmp	r5, r4
 8004a46:	d10b      	bne.n	8004a60 <_free_r+0x70>
 8004a48:	6824      	ldr	r4, [r4, #0]
 8004a4a:	4421      	add	r1, r4
 8004a4c:	1854      	adds	r4, r2, r1
 8004a4e:	42a3      	cmp	r3, r4
 8004a50:	6011      	str	r1, [r2, #0]
 8004a52:	d1e0      	bne.n	8004a16 <_free_r+0x26>
 8004a54:	681c      	ldr	r4, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	6053      	str	r3, [r2, #4]
 8004a5a:	440c      	add	r4, r1
 8004a5c:	6014      	str	r4, [r2, #0]
 8004a5e:	e7da      	b.n	8004a16 <_free_r+0x26>
 8004a60:	d902      	bls.n	8004a68 <_free_r+0x78>
 8004a62:	230c      	movs	r3, #12
 8004a64:	6003      	str	r3, [r0, #0]
 8004a66:	e7d6      	b.n	8004a16 <_free_r+0x26>
 8004a68:	6825      	ldr	r5, [r4, #0]
 8004a6a:	1961      	adds	r1, r4, r5
 8004a6c:	428b      	cmp	r3, r1
 8004a6e:	bf04      	itt	eq
 8004a70:	6819      	ldreq	r1, [r3, #0]
 8004a72:	685b      	ldreq	r3, [r3, #4]
 8004a74:	6063      	str	r3, [r4, #4]
 8004a76:	bf04      	itt	eq
 8004a78:	1949      	addeq	r1, r1, r5
 8004a7a:	6021      	streq	r1, [r4, #0]
 8004a7c:	6054      	str	r4, [r2, #4]
 8004a7e:	e7ca      	b.n	8004a16 <_free_r+0x26>
 8004a80:	b003      	add	sp, #12
 8004a82:	bd30      	pop	{r4, r5, pc}
 8004a84:	20004bf8 	.word	0x20004bf8

08004a88 <__malloc_lock>:
 8004a88:	4801      	ldr	r0, [pc, #4]	; (8004a90 <__malloc_lock+0x8>)
 8004a8a:	f7ff bfa1 	b.w	80049d0 <__retarget_lock_acquire_recursive>
 8004a8e:	bf00      	nop
 8004a90:	20004bf4 	.word	0x20004bf4

08004a94 <__malloc_unlock>:
 8004a94:	4801      	ldr	r0, [pc, #4]	; (8004a9c <__malloc_unlock+0x8>)
 8004a96:	f7ff bf9c 	b.w	80049d2 <__retarget_lock_release_recursive>
 8004a9a:	bf00      	nop
 8004a9c:	20004bf4 	.word	0x20004bf4

08004aa0 <_init>:
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	bf00      	nop
 8004aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa6:	bc08      	pop	{r3}
 8004aa8:	469e      	mov	lr, r3
 8004aaa:	4770      	bx	lr

08004aac <_fini>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr
